<?xml version="1.0"  encoding="UTF-8"?>
<rss version="2.0">  <channel>
    <title>Leonard</title>
    <link>http://sample.com</link>
    <pubDate>18 Feb 16 17:01 CST</pubDate>
    <item>
      <title>docker gitlab</title>
      <link>http://sample.com/gitlab/docker-gitlab/</link>
      <pubDate>2016-02-18 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;相关参考资料:&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;&lt;a href=&#34;http://yangchangming.com/blog/show/47&#34;&gt;OS X 上安装GitLab全程指南&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&lt;h3&gt;&lt;a href=&#34;http://www.tuicool.com/articles/UrQJFz&#34;&gt;gitlab一键安装 笔记&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/sameersbn/docker-gitlab/blob/master/README.md#redis&#34;&gt;sameersbn/gitlab:8.4.4&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;docker run --name gitlab -d  -p 10080:80  --link gitlab-postgresql:postgresql --link gitlab-redis:redisio --volume /srv/docker/gitlab/gitlab:/home/git/data  sameersbn/gitlab:7.5.3&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;docker@boot2docker:~$&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;docker ps -a&#xA;&#xA;CONTAINER ID        IMAGE                            COMMAND                CREATED             STATUS              PORTS                                    NAMES&#xA;&#xA;2b61b7095091        sameersbn/gitlab:7.5.3           &amp;quot;/app/init app:start   7 seconds ago       Up 6 seconds        22/tcp, 443/tcp, 0.0.0.0:10080-&amp;gt;80/tcp   gitlab              &#xA;&#xA;0d3c6db7f97d        quay.io/sameersbn/redis:latest   &amp;quot;/sbin/entrypoint.sh   23 hours ago        Up 23 hours         6379/tcp                                 gitlab-redis        &#xA;&#xA;7171631f285d        sameersbn/postgresql:latest      &amp;quot;/sbin/entrypoint.sh   23 hours ago        Up 23 hours         5432/tcp                                 gitlab-postgresql  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;&amp;gt;git remote add origin &lt;a href=&#34;http://192.168.59.103:10080/root/demo.git&#34;&gt;http://192.168.59.103:10080/root/demo.git&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;&amp;gt;使用局域网ip或localhost或127.0.0.1  加上10080端口访问  192.168.59.103:10080&lt;/h2&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;ip是boot2docker  start 得到的 ip&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;boot2docker  start&#xA;Waiting for VM and Docker daemon to start........o&#xA;Started.&#xA;Writing /Users/leonard/.boot2docker/certs/boot2docker-vm/ca.pem&#xA;Writing /Users/leonard/.boot2docker/certs/boot2docker-vm/cert.pem&#xA;Writing /Users/leonard/.boot2docker/certs/boot2docker-vm/key.pem&#xA;&#xA;To connect the Docker client to the Docker daemon, please set:&#xA;    export DOCKER_TLS_VERIFY=1&#xA;    export DOCKER_HOST=tcp://192.168.59.103:2376&#xA;    export DOCKER_CERT_PATH=/Users/leonard/.boot2docker/certs/boot2docker-vm&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;使用 boot2docker时，所有的 container都在boot2docker up命令启动的 Virtual Box VM里，&lt;br /&gt;&#xA;container使用的端口通过 docker -P或者 -p映射到了 VM里的 LinuxHost上，但是在 Mac OS X里是没有的。&lt;br /&gt;&#xA;从本机倒是可能用VM的ip访问到 container，从移动设备或其它机器上需要访问 container时，就需要在 Mac OS X上再做一次端口映射(portmapping)。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;有两个方法&lt;/strong&gt;，在&lt;strong&gt;&lt;a href=&#34;https://github.com/boot2docker/boot2docker/blob/master/doc/WORKAROUNDS.md&#34;&gt;https://github.com/boot2docker/boot2docker/blob/master/doc/WORKAROUNDS.md&lt;/a&gt;&lt;/strong&gt;里有介绍：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在 Mac OS X与 VM Linux之间临时建立 ssh tunnel&lt;br /&gt;&#xA;&lt;code&gt;boot2docker ssh -vnNTL 8000:localhost:10080&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;用 Virtual Box的 NAT端口映射能力建立永久性的映射&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;虚拟机已关闭时：&lt;code&gt;VBoxManage modifyvm &amp;quot;boot2docker-vm&amp;quot; --natpf1 &amp;quot;tcp-port8000,tcp,,8000,,10080&amp;quot;;&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;虚拟机在运行时：&lt;code&gt;VBoxManage controlvm &amp;quot;boot2docker-vm&amp;quot; natpf1 &amp;quot;tcp-port8000,tcp,,8000,,10080&amp;quot;&lt;/code&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>go get 报错</title>
      <link>http://sample.com/git/go-get-%E6%8A%A5%E9%94%99/</link>
      <pubDate>2016-02-18 12:00:00 +0800</pubDate>
      <description>&lt;pre&gt;&lt;code&gt;Cloning into &#39;E:\work\gopath\src\github.com\astaxie\beego&#39;...&#xA;fatal: unable to access &#39;https://github.com/astaxie/beego/&#39;: error setting certificate verify locations:&#xA;CAfile: E:/Software/git/Git/mingw64/ssl/certs/ca-bundle.crt&#xA;CApath: none&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;解决:&lt;/h1&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;git config --global http.sslVerify false//跳过ssl校验即可&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;</description>
    </item>
    <item>
      <title>git 创建分支并提交到远程</title>
      <link>http://sample.com/git/git-%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF%E5%B9%B6%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B/</link>
      <pubDate>2016-02-18 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;1,从已有的分支创建新的分支(如从master分支),创建一个dev分支&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;git checkout -b dev&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;2,创建完可以查看一下,分支已经切换到dev&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git branch&#xA;&#xA;    * dev&#xA;&#xA;    master&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;3,提交该分支到远程仓库&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git push origin dev&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;4,测试从远程获取dev&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git pull origin dev&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;或者：&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;如果用命令行，运行 git fetch，可以将远程分支信息获取到本地,&lt;br /&gt;&#xA;再运行 &lt;strong&gt;git checkout -b local-branchname origin/remote_branchname&lt;/strong&gt;&lt;br /&gt;&#xA;就可以将远程分支映射到本地命名为local-branchname  的一分支&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;5,我觉得现在重要的就是设置git push,pull默认的提交获取分支,这样就很方便的使用git push 提交信息或git pull获取信息&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git branch --set-upstream-to=origin/dev&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;取消对master的跟踪&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git branch --unset-upstream master&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;6,现在随便修改一下工程文件的内容,然后&lt;em&gt;git commit ,git push&lt;/em&gt;,之后就可以直接提交到远程的dev分支中,而不会是master&lt;/h2&gt;&#xA;</description>
    </item>
    <item>
      <title>在github上同步一个分支(fork)</title>
      <link>http://sample.com/git/%E5%9C%A8github%E4%B8%8A%E5%90%8C%E6%AD%A5%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%28fork%29/</link>
      <pubDate>2016-02-18 12:00:00 +0800</pubDate>
      <description>&lt;h3&gt;在github上同步一个分支(fork)&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;在同步之前，需要创建一个远程点指向上游仓库(repo).如果你已经派生了一个原始仓库，可以按照如下方法做。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    $ git remote -v  &#xA;    # List the current remotes （列出当前远程仓库）  &#xA;    # origin  https://github.com/user/repo.git (fetch)  &#xA;    # origin  https://github.com/user/repo.git (push)  &#xA;    $ git remote add upstream https://github.com/otheruser/repo.git  &#xA;    # Set a new remote (设置一个新的远程仓库)  &#xA;    $ git remote -v  &#xA;    # Verify new remote (验证新的原唱仓库)  &#xA;    # origin    https://github.com/user/repo.git (fetch)  &#xA;    # origin    https://github.com/user/repo.git (push)  &#xA;    # upstream  https://github.com/otheruser/repo.git (fetch)  &#xA;    # upstream  https://github.com/otheruser/repo.git (push)  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;同步&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;同步上游仓库到你的仓库需要执行&lt;strong&gt;两步&lt;/strong&gt;：首先你需要从远程拉去，之后你需要合并你希望的分支到你的本地副本分支。&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;拉取&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;从远程仓库拉取将取回其分支以及各自的提交。它们将存储在你本地仓库的指定分之下。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    $ git fetch upstream&#xA;    # Grab the upstream remote&#39;s branches&#xA;    # remote: Counting objects: 75, done.&#xA;    # remote: Compressing objects: 100% (53/53), done.&#xA;    # remote: Total 62 (delta 27), reused 44 (delta 9)&#xA;    # Unpacking objects: 100% (62/62), done.&#xA;    # From https://github.com/otheruser/repo&#xA;    #  * [new branch]      master     -&amp;gt; upstream/master&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;现在我们把上游master保存到了本地仓库，upstream/master&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    $ git branch -va&#xA;    # List all local and remote-tracking branches&#xA;    # * master                  a422352 My local commit&#xA;    #   remotes/origin/HEAD     -&amp;gt; origin/master&#xA;    #   remotes/origin/master   a422352 My local commit&#xA;    #   remotes/upstream/master 5fdff0f Some upstream commit&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;合并&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;现在我们已经拉取了上游仓库，我们将要合并其变更到我们的本地分支。这将使该分支与上游同步，而不会失去我们的本地更改。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    $ git checkout master&#xA;    # Check out our local master branch&#xA;    # Switched to branch &#39;master&#39;&#xA;&#xA;    $ git merge upstream/master&#xA;    # Merge upstream&#39;s master into our own&#xA;    # Updating a422352..5fdff0f&#xA;    # Fast-forward&#xA;    #  README                    |    9 -------&#xA;    #  README.md                 |    7 ++++++&#xA;    #  2 files changed, 7 insertions(+), 9 deletions(-)&#xA;    #  delete mode 100644 README&#xA;    #  create mode 100644 README.md&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;如果您的本地分支没有任何独特的提交，Git会改为执行“fast-forward”。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    $ git merge upstream/master&#xA;    # Updating 34e91da..16c56ad&#xA;    # Fast-forward&#xA;    #  README.md                 |    5 +++--&#xA;    #  1 file changed, 3 insertions(+), 2 deletions(-)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;最后将本地变更推送到远程服务器即可。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/syncing-a-fork&#34;&gt;参考资料&lt;/a&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>centos7安装gitlab</title>
      <link>http://sample.com/centos/centos7%E5%AE%89%E8%A3%85gitlab/</link>
      <pubDate>2016-02-18 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;a href=&#34;http://my.oschina.net/u/1169607/blog/345833&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;gitlab-ctl reconfigure 报错解决方法&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;遇见的问题及解决:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;[root@websvr01 ~]# sudo gitlab-ctl reconfigure&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Starting Chef Client, version 11.12.2&#xA;Compiling Cookbooks...&#xA;Recipe: gitlab::default&#xA;  directory[/etc/gitlab] action create (up to date)&#xA;================================================================================&#xA;Recipe Compile Error in /opt/gitlab/embedded/cookbooks/gitlab/recipes/default.rb&#xA;================================================================================&#xA;RuntimeError&#xA;------------&#xA;External URL must include a FQDN&#xA;Cookbook Trace:&#xA;---------------&#xA;  /opt/gitlab/embedded/cookbooks/gitlab/libraries/gitlab.rb:109:in `parse_external_url&#39;&#xA;  /opt/gitlab/embedded/cookbooks/gitlab/libraries/gitlab.rb:260:in `generate_config&#39;&#xA;  /opt/gitlab/embedded/cookbooks/gitlab/recipes/default.rb:34:in `from_file&#39;&#xA;Relevant File Content:&#xA;----------------------&#xA;/opt/gitlab/embedded/cookbooks/gitlab/libraries/gitlab.rb:&#xA;102:  &#xA;103:      def parse_external_url&#xA;104:        return unless external_url&#xA;105:  &#xA;106:        uri = URI(external_url.to_s)&#xA;107:  &#xA;108:        unless uri.host&#xA;109&amp;gt;&amp;gt;         raise &amp;quot;External URL must include a FQDN&amp;quot;&#xA;110:        end&#xA;111:        Gitlab[&#39;user&#39;][&#39;git_user_email&#39;] ||= &amp;quot;gitlab@#{uri.host}&amp;quot;&#xA;112:        Gitlab[&#39;gitlab_rails&#39;][&#39;gitlab_host&#39;] = uri.host&#xA;113:        Gitlab[&#39;gitlab_rails&#39;][&#39;gitlab_email_from&#39;] ||= &amp;quot;gitlab@#{uri.host}&amp;quot;&#xA;114:  &#xA;115:        case uri.scheme&#xA;116:        when &amp;quot;http&amp;quot;&#xA;117:          Gitlab[&#39;gitlab_rails&#39;][&#39;gitlab_https&#39;] = false&#xA;118:        when &amp;quot;https&amp;quot;&#xA;Running handlers:&#xA;[2014-11-25T11:10:44+08:00] ERROR: Running exception handlers&#xA;Running handlers complete&#xA;[2014-11-25T11:10:44+08:00] ERROR: Exception handlers complete&#xA;[2014-11-25T11:10:44+08:00] FATAL: Stacktrace dumped to /opt/gitlab/embedded/cookbooks/cache/chef-stacktrace.out&#xA;Chef Client failed. 0 resources updated in 7.716937465 seconds&#xA;[2014-11-25T11:10:44+08:00] ERROR: External URL must include a FQDN&#xA;[2014-11-25T11:10:45+08:00] FATAL: Chef::Exceptions::ChildConvergeError: Chef run process exited unsuccessfully (exit code 1)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;解决方法：&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;是因为/etc/gitlab/gitlab.rb文件中的内容是：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;external_url &#39;hostname&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;将其修改为：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;external_url=&#39;hostname&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;即可，只需要在原来的配置项中添加个 ‘=’ 即可，为了避免域名引起的问题，也可以直接配置ip，如下所示：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;external_url=&#39;192.168.1.49&#39;。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>centos6.5 gitlab</title>
      <link>http://sample.com/gitlab/centos6.5-gitlab/</link>
      <pubDate>2016-02-18 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;a href=&#34;https://about.gitlab.com/downloads/&#34;&gt;参考&lt;/a&gt;&lt;br /&gt;&#xA;&lt;a href=&#34;http://www.01happy.com/centos-6-5-install-gitlab/&#34;&gt;教程&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;code&gt;错误:&lt;/code&gt;&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; Invalid GPG Key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-puias: No key found in given key data&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;解决:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; rpm --import http://puias.princeton.edu/data/puias/6/x86_64/os/RPM-GPG-KEY-puias&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;&lt;code&gt;错误:&lt;/code&gt;&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;../A24DFE8B-19CB-4284-B4B5-153C4BFADDE7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;解决:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;yum install libxml2-devel libxslt libxslt-devel&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;gitlab安装成功!&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;../success.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;&#xA;  &lt;img src=&#34;../4AD4BE76-6A77-4807-89C9-F97836F71391.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>systemctl</title>
      <link>http://sample.com/centos/systemctl/</link>
      <pubDate>2016-02-17 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;strong&gt;systemctl&lt;/strong&gt; 是管制服务的主要工具，&lt;br /&gt;&#xA;它整合了&lt;em&gt;chkconfig&lt;/em&gt; 与 *service*功能于一体。&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;systemctl is-enabled iptables.service&lt;/p&gt;&#xA;&#xA;&lt;p&gt;systemctl is-enabled servicename.service #查询服务是否开机启动&lt;br /&gt;&#xA;systemctl enable *.service #开机运行服务&lt;br /&gt;&#xA;systemctl disable *.service #取消开机运行&lt;br /&gt;&#xA;systemctl start *.service #启动服务&lt;br /&gt;&#xA;systemctl stop *.service #停止服务&lt;br /&gt;&#xA;systemctl restart *.service #重启服务&lt;br /&gt;&#xA;systemctl reload *.service #重新加载服务配置文件&lt;br /&gt;&#xA;systemctl status *.service #查询服务运行状态&lt;br /&gt;&#xA;systemctl --failed #显示启动失败的服务&lt;br /&gt;&#xA;注：*代表某个服务的名字，如http的服务名为httpd&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;例如在CentOS 7 上安装http&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;[root@CentOS7 ~]#&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;yum -y install httpd&lt;/code&gt;&#xA;启动服务（等同于service httpd start）&lt;br /&gt;&#xA;&lt;code&gt;systemctl start httpd.service&lt;/code&gt;&#xA;停止服务（等同于service httpd stop）&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;systemctl stop httpd.service&lt;/code&gt;&#xA;重启服务（等同于service httpd restart）&lt;br /&gt;&#xA;&lt;code&gt;systemctl restart httpd.service&lt;/code&gt;&#xA;查看服务是否运行（等同于service httpd status）&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;systemctl status httpd.service&lt;/code&gt;&#xA;开机自启动服务（等同于chkconfig httpd on）&lt;br /&gt;&#xA;&lt;code&gt;systemctl enable httpd.service&lt;/code&gt;&#xA;开机时禁用服务（等同于chkconfig httpd on）&#xA;&lt;code&gt;systemctl disable httpd.service&lt;/code&gt;&#xA;查看服务是否开机启动 （等同于chkconfig --list）&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>iptables</title>
      <link>http://sample.com/linux/iptables/</link>
      <pubDate>2016-02-17 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;1,&lt;strong&gt;检测iptables&lt;/strong&gt;:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;`rpm -qa iptables`  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;result:&lt;/strong&gt; &lt;code&gt;iptables-1.4.21-13.el7.x86_64&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;2,&lt;strong&gt;怎样检测并且确保iptables服务正在运行？&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;service status iptables           [On CentOS 6/5]&#xA;systemctl status iptables         [On CentOS 7]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;如果iptables没有在运行，可以使用下面的语句&lt;/p&gt;&#xA;&#xA;&lt;p&gt;---------------- &lt;strong&gt;在CentOS 6/5下&lt;/strong&gt; ----------------&lt;br /&gt;&#xA;&lt;code&gt;chkconfig --level 35 iptables on&lt;/code&gt;&lt;br /&gt;&#xA;&lt;code&gt;service iptables start&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;---------------- &lt;strong&gt;在CentOS 7下&lt;/strong&gt; ----------------&lt;br /&gt;&#xA;&lt;code&gt;systemctl enable iptables&lt;/code&gt;&lt;br /&gt;&#xA;&lt;code&gt;systemctl start iptables&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;检查iptables中当前定义的规则&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;iptables -L&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;刷新所有的iptables规则或者特定的链, 使用下面的命令来刷新一个特定的链。&lt;/h3&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;iptables --flush OUTPUT&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;要刷新所有的规则，可以用：&lt;/h3&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;iptables --flush&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;在iptables中添加一条规则，接受所有从一个信任的IP地址（例如，192.168.0.7）过来的包。&lt;/h3&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;iptables -A INPUT -s 192.168.0.7 -j ACCEPT&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;还可以在源IP中使用标准的斜线和子网掩码：&lt;/h3&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;iptables -A INPUT -s 192.168.0.&lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;24&lt;/sub&gt; -j ACCEPT&#xA;iptables -A INPUT -s 192.168.0.&lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;255&lt;/sub&gt;.255.255.0 -j ACCEPT&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;假如有一台电脑的本地IP地址是192.168.0.6。你需要封锁在21、22、23和80号端口上的连接，你会怎么做？&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;答案&lt;/strong&gt;  : 这时，我所需要的就是在iptables中使用‘multiport‘选项，并将要封锁的端口号跟在它后面。&lt;br /&gt;&#xA;&lt;code&gt;iptables -A INPUT -s 192.168.0.6 -p tcp -m multiport --dport 22,23,80,8080 -j DROP&lt;/code&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>centos挂载ntfs</title>
      <link>http://sample.com/centos/centos%E6%8C%82%E8%BD%BDntfs/</link>
      <pubDate>2016-02-16 12:00:00 +0800</pubDate>
      <description>&lt;pre&gt;&lt;code&gt;sudo mount -t ntfs-3g  /dev/sdb1 /pic/&#xA;&#xA;sudo umount /pic/  强制卸载&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>说明</title>
      <link>http://sample.com/README/%E8%AF%B4%E6%98%8E/</link>
      <pubDate>2016-02-16 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;em&gt;本博客初次使用&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;本人相关博客近期会陆续迁移到此处,欢迎批评指点!&lt;/h1&gt;&#xA;</description>
    </item>
    <item>
      <title>Leonard的第一篇博客</title>
      <link>http://sample.com/2016/new-born.html</link>
      <pubDate>2016-02-15 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;感谢你使用Gor编写博客&lt;/h1&gt;&#xA;&#xA;&lt;h2&gt;本文位于 posts/first-blog.md , 你可以任意删掉,修改这个文件&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;文件开头是当前文章的元数据&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;date为自动生成, 当然,你可以修改,这是你的自由&lt;/li&gt;&#xA;&lt;li&gt;permalink 可以是固定地址,也可以由gor为你自动生成&lt;/li&gt;&#xA;&lt;li&gt;categories 就是分类, 可以多个&lt;/li&gt;&#xA;&lt;li&gt;tags 同理,多个标签也是很常见的&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;请确保文件使用UTF8 without BOM编码&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;你可以通过执行下面的语句来新建一篇博客:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;gor post 文章标题&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;编译你的博客,并预览之&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;gor compile #编译&#xA;gor http&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;然后打开你的浏览器,访问 &lt;a href=&#34;http://127.0.0.1:8080&#34;&gt;http://127.0.0.1:8080&lt;/a&gt; 来预览&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;你将使用Markdown来编写博客&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://wowubuntu.com/markdown/&#34;&gt;Markdown 语法中文版&lt;/a&gt; 能让你快速入门其语法&lt;/p&gt;&#xA;&#xA;&lt;p&gt;相信&lt;a href=&#34;http://markdownpad.com&#34;&gt;MarkdownPad&lt;/a&gt;或&lt;a href=&#34;http://code.google.com/p/liteide/&#34;&gt;liteide&lt;/a&gt;会是你的编写博客的好帮手&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;如果你打算部署到github的pages上&lt;/h2&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;申请github帐户&lt;/li&gt;&#xA;&lt;li&gt;新建一个库 username.github.com 即你的用户名命名的地址&lt;/li&gt;&#xA;&lt;li&gt;将compiled目录,作为根路径,提交上去github.com上&lt;/li&gt;&#xA;&lt;li&gt;稍等几分钟, 你即可通过 &lt;a href=&#34;http://username.github.com&#34;&gt;http://username.github.com&lt;/a&gt; 访问到&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h2&gt;附上git教程 &lt;a href=&#34;http://gitbook.liuhui998.com/&#34;&gt;GitBook中文版&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;一般来说,你只需要几个简单的git命令就足以应付大部分需求(仅示例)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git clone git://github.com/wendal/wendal.net.git&#xA;git add -A&#xA;git commit -m &amp;quot;...&amp;quot;&#xA;git pull&#xA;git push&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;用gor编写博客将会是一件很开心的事,如果有任何意见或建议,欢迎到 &lt;a href=&#34;http://github.com/wendal/gor&#34;&gt;gor的官网&lt;/a&gt; 提交issue&lt;/h2&gt;&#xA;&#xA;&lt;h1&gt;祝你使用愉快&lt;/h1&gt;&#xA;</description>
    </item>
    <item>
      <title>Go外部包操作非导出字段</title>
      <link>http://sample.com/default/Go%E5%A4%96%E9%83%A8%E5%8C%85%E6%93%8D%E4%BD%9C%E9%9D%9E%E5%AF%BC%E5%87%BA%E5%AD%97%E6%AE%B5/</link>
      <pubDate>2016-02-15 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;Go外部包操作非导出字段&lt;/h2&gt;&#xA;&#xA;&lt;h5&gt;ps:发现一种用法，看代码&lt;/h5&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Template struct {&#xA;    name string&#xA;    *parse.Tree&#xA;    *common&#xA;    leftDelim  string&#xA;    rightDelim string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type common struct {&#xA;   &#x9;tmpl  map[string]*Template&#xA;   &#x9;parseFuncs template.FuncMap&#xA;   &#x9;execFuncs  map[string]reflect.Value&#xA;}&#xA;&#xA;func TestDemo(t *testing.T) {&#xA;   tpl := template.New(&amp;quot;Foo&amp;quot;)&#xA;   p := (*Template)(unsafe.Pointer(tpl))&#xA;   p.name = &amp;quot;Bar&amp;quot; // 关键在这里，突破私有成员&#xA;   logger.Debug(&amp;quot;%v:%v&amp;quot;, p, tpl)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;输出结果&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;amp;{Bar &amp;lt;nil&amp;gt; &amp;lt;nil&amp;gt;  } &amp;amp;{Bar &amp;lt;nil&amp;gt; &amp;lt;nil&amp;gt;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;t.name 也变成 Bar了, 成功突破template.Template私有字段 name&lt;/h1&gt;&#xA;</description>
    </item>
  </channel>
</rss>