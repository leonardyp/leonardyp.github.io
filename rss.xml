<?xml version="1.0"  encoding="UTF-8"?>
<rss version="2.0">  <channel>
    <title>Leonard</title>
    <link>http://sample.com</link>
    <pubDate>09 Sep 16 18:10 CST</pubDate>
    <item>
      <title>grpc与thrift</title>
      <link>http://sample.com/rpc/grpc%E4%B8%8Ethrift/</link>
      <pubDate>2016-09-08 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;code&gt;-n 100w -c 1 表示100万次请求,1个协程 1个进程&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;cpu:     2.2 GHz Intel Core i7&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;内存:    16 GB 1600 MHz DDR3&lt;/h2&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;h1&gt;grpc:&lt;/h1&gt;&#xA;&#xA;&lt;h2&gt;1,  -n 100w    -c 1&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; 第一次耗时:  2m4.34570465s&#xA;&#xA; 第二次耗时:  2m7.211826234s&#xA;&#xA; 第三次耗时:  2m5.24262806s&#xA;&#xA;  平均耗时:    2m5.60005298s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;2, -n100w     -c 10&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; 第一次耗时:  42.024087027s&#xA;&#xA; 第二次耗时:  42.444382712s&#xA;&#xA; 第三次耗时:  41.43449645s&#xA;&#xA; 平均耗时:    41.9676544s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;thrift:&lt;/h1&gt;&#xA;&#xA;&lt;h2&gt;1,  -n 100w  -c  1&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; 第一次耗时:  42.944920795s &#xA;&#xA; 第二次耗时:  41.842003381s&#xA;&#xA; 第三次耗时:  41.322663199s&#xA;&#xA; 平均耗时:    42.0365291s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;&lt;code&gt;thrift client非并发安全的，client并发直接会挂掉,针对这个问题 解决办法有二:&lt;/code&gt;&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; 1, 自己实现链接池  可以仿照redis ,mysql 的 client都可以  &#xA;&#xA; 2, 改thrift生成源码文件的 源码,使用sync包加锁    亲测可以&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>redis or ssdb</title>
      <link>http://sample.com/nosql/redis-or-ssdb/</link>
      <pubDate>2016-08-25 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;测试环境&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;1,  操作系统&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;centos7&#xA;&#xA;内核:3.10.0-123.20.1.el7.x86_64&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;2,  内存:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;grep MemTotal /proc/meminfo&#xA;&#xA;MemTotal:        7138276 kB&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;3, 请求数 10000,并发clients  50&lt;/p&gt;&#xA;&#xA;&lt;p&gt;4,服务器版本信息&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;   1,redis:   Redis server v=3.2.1 sha=00000000:0 malloc=libc bits=64 build=939341c443eba189&#xA;&#xA;   2,ssdb:  1.9.4&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;&lt;code&gt;redis-benchmark -n 10000  -c 50&lt;/code&gt;&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;====== PING_INLINE ======&lt;br /&gt;&#xA;  10000 requests completed in 0.31 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;/p&gt;&#xA;&#xA;&lt;p&gt;31746.03 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== PING_BULK ======&lt;br /&gt;&#xA;  10000 requests completed in 0.29 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;/p&gt;&#xA;&#xA;&lt;p&gt;34246.57 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== SET ======&lt;br /&gt;&#xA;  10000 requests completed in 0.31 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;/p&gt;&#xA;&#xA;&lt;p&gt;32679.74 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== GET ======&lt;br /&gt;&#xA;  10000 requests completed in 0.30 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;br /&gt;&#xA;33222.59 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== INCR ======&lt;br /&gt;&#xA;  10000 requests completed in 0.31 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;br /&gt;&#xA;32051.28 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== LPUSH ======&lt;br /&gt;&#xA;  10000 requests completed in 0.31 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;br /&gt;&#xA;32679.74 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== RPUSH ======&lt;br /&gt;&#xA;  10000 requests completed in 0.31 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;/p&gt;&#xA;&#xA;&lt;p&gt;32154.34 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== LPOP ======&lt;br /&gt;&#xA;  10000 requests completed in 0.32 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;/p&gt;&#xA;&#xA;&lt;p&gt;31152.65 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== RPOP ======&lt;br /&gt;&#xA;  10000 requests completed in 0.29 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;br /&gt;&#xA;34843.21 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== SADD ======&lt;br /&gt;&#xA;  10000 requests completed in 0.32 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;/p&gt;&#xA;&#xA;&lt;p&gt;31347.96 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== SPOP ======&lt;br /&gt;&#xA;  10000 requests completed in 0.30 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;/p&gt;&#xA;&#xA;&lt;p&gt;33557.05 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== LPUSH (needed to benchmark LRANGE) ======&lt;br /&gt;&#xA;  10000 requests completed in 0.31 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;/p&gt;&#xA;&#xA;&lt;p&gt;31847.13 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== LRANGE_100 (first 100 elements) ======&lt;br /&gt;&#xA;  10000 requests completed in 0.31 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;/p&gt;&#xA;&#xA;&lt;p&gt;32258.06 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== LRANGE_300 (first 300 elements) ======&lt;br /&gt;&#xA;  10000 requests completed in 0.31 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;/p&gt;&#xA;&#xA;&lt;p&gt;32679.74 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== LRANGE_500 (first 450 elements) ======&lt;br /&gt;&#xA;  10000 requests completed in 0.33 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;/p&gt;&#xA;&#xA;&lt;p&gt;30303.03 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== LRANGE_600 (first 600 elements) ======&lt;br /&gt;&#xA;  10000 requests completed in 0.31 seconds&lt;br /&gt;&#xA;  3 bytes payload&lt;br /&gt;&#xA;  keep alive: 1&lt;/p&gt;&#xA;&#xA;&lt;p&gt;32362.46 requests per second&lt;/p&gt;&#xA;&#xA;&lt;p&gt;====== MSET (10 keys) ======&lt;br /&gt;&#xA;  10000 requests completed in 0.32 seconds&lt;br /&gt;&#xA;  3 bytes payload&#xA;  keep alive: 1&lt;/p&gt;&#xA;&#xA;&lt;p&gt;30959.75 requests per second&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;&lt;code&gt;ssdb压测&lt;/code&gt;&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;========== set ==========&lt;br /&gt;&#xA;qps: 14691, time: 0.681 s&lt;br /&gt;&#xA;========== get ==========&lt;br /&gt;&#xA;qps: 20075, time: 0.498 s&lt;br /&gt;&#xA;========== del ==========&lt;br /&gt;&#xA;qps: 12913, time: 0.774 s&lt;br /&gt;&#xA;========== hset ==========&lt;br /&gt;&#xA;qps: 13218, time: 0.757 s&lt;br /&gt;&#xA;========== hget ==========&lt;br /&gt;&#xA;qps: 18534, time: 0.540 s&lt;br /&gt;&#xA;========== hdel ==========&lt;br /&gt;&#xA;qps: 12697, time: 0.788 s&lt;br /&gt;&#xA;========== zset ==========&lt;br /&gt;&#xA;qps: 8334, time: 1.200 s&lt;br /&gt;&#xA;========== zget ==========&lt;br /&gt;&#xA;qps: 17628, time: 0.567 s&#xA;========== zdel ==========&lt;br /&gt;&#xA;qps: 11980, time: 0.835 s&lt;br /&gt;&#xA;========== qpush ==========&lt;br /&gt;&#xA;qps: 8499, time: 1.177 s&lt;br /&gt;&#xA;========== qpop ==========&lt;br /&gt;&#xA;qps: 10060, time: 0.994 s&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;CPU 对比:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;   redis:     百分之十几到 七十几         &#xA;&#xA;   ssdb:    15%-25%&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;内存对比:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  redis:   0.0%&#xA;&#xA;  ssdb:  1%左右浮动  +-0.5&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;   1,redis比较消耗cpu资源&#xA;   2,ssdb cpu 内存资源较为稳定&#xA;   3,redis    ssdb查询优于redis , 更新略逊redis&#xA;  &#xA;     ssdb基于磁盘存储，对于想要redis的查询性能，对写入性能不敏感,且担心内存溢出,可以考虑尝试ssdb&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>thrift</title>
      <link>http://sample.com/常用rpc框架/thrift/</link>
      <pubDate>2016-05-04 12:00:00 +0800</pubDate>
      <description>&lt;ul&gt;&#xA;&lt;li&gt;thrift:&lt;a href=&#34;http://blog.csdn.net/yohunl/article/details/41748511&#34;&gt;http://blog.csdn.net/yohunl/article/details/41748511&lt;/a&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;go-php 示例:&lt;a href=&#34;http://studygolang.com/articles/3110&#34;&gt;http://studygolang.com/articles/3110&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;cat rpcService.thrift&lt;/p&gt;&#xA;&#xA;&lt;p&gt;namespace go test.rpc&lt;/p&gt;&#xA;&#xA;&lt;p&gt;namespace java test.rpc&lt;/p&gt;&#xA;&#xA;&lt;p&gt;// 测试服务&lt;/p&gt;&#xA;&#xA;&lt;p&gt;service RpcService {&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;// 发起远程调用&#xA;&#xA;list&amp;lt;string&amp;gt; funCall(1:i64 callTime, 2:map&amp;lt;string, string&amp;gt; paramMap),&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;}&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>grpc</title>
      <link>http://sample.com/常用rpc框架/grpc/</link>
      <pubDate>2016-05-04 12:00:00 +0800</pubDate>
      <description></description>
    </item>
    <item>
      <title>gopush-java</title>
      <link>http://sample.com/java/gopush-java/</link>
      <pubDate>2016-05-04 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;gopush 服务端搭建&lt;/h1&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;参考   &lt;a href=&#34;#https://github.com/Terry-Mao/gopush-cluster/blob/master/README_zh.md#%E5%AE%89%E8%A3%85&#34;&gt;https://github.com/Terry-Mao/gopush-cluster/blob/master/README_zh.md#%E5%AE%89%E8%A3%85&lt;/a&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h1&gt;首先要启动zookeeper:&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;cd /Users/leonard/work/src/data/programfiles/zookeeper-3.4.8/bin&lt;/p&gt;&#xA;&#xA;&lt;p&gt;sh zkServer.sh  start&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;启动message,comet,web:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;cd /Users/leonard/software/gopath/bin&lt;/p&gt;&#xA;&#xA;&lt;p&gt;nohup message -c message.conf 2&amp;gt;&amp;amp;1 &amp;gt;&amp;gt;/Users/leonard/work/src/data/logs/gopush-cluster/panic-message.log &amp;amp;&#xA;nohup comet -c comet.conf 2&amp;gt;&amp;amp;1 &amp;gt;&amp;gt;/Users/leonard/work/src/data/logs/gopush-cluster/panic-comet.log &amp;amp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;nohup web -c web.conf 2&amp;gt;&amp;amp;1 &amp;gt;&amp;gt;/Users/leonard/work/src/data/logs/gopush-cluster/panic-web.log &amp;amp;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;Error: Could not open &amp;quot;/data/apps/go/bin/comet_log.xml&amp;quot; for reading: open /data/apps/go/bin/comet_log.xml: no such file or directory&#xA;[2]+  Exit 1                  comet -c comet.conf 2&amp;gt;&amp;amp;1 &amp;gt;&amp;gt; /Users/leonard/work/src/data/logs/gopush-cluster/panic-comet.log  &#xA;&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;解决:需要修改comet.conf&lt;/h2&gt;&#xA;&#xA;&lt;h3&gt;注意:message.conf需要修改&lt;/h3&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;1,redis:   node1:1 tcp@localhost:6379#admin&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;2,mysql:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;node1:1 root:root@(localhost:3307)/gopush?parseTime=true&amp;amp;loc=Local&amp;amp;charset=utf8&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>翻墙</title>
      <link>http://sample.com/翻墙/%E7%BF%BB%E5%A2%99/</link>
      <pubDate>2016-03-24 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;一直用XX-Net挺爽的,最近似乎不太稳定，得赶紧找其他的方案!&lt;/h1&gt;&#xA;&#xA;&lt;h2&gt;&lt;code&gt;1,https://github.com/leonardyp/XX-Net&lt;/code&gt;&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;&lt;code&gt;2,https://getlantern.org/&lt;/code&gt;&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;今天尝试了下Lantern速度跟XX-Net差不多,比较稳定,安装也毫无技术含量,以上两款工具就基本够用了&lt;/h2&gt;&#xA;</description>
    </item>
    <item>
      <title>erlang-基础概念</title>
      <link>http://sample.com/erlang/erlang-%E5%9F%BA%E7%A1%80%E6%A6%82%E5%BF%B5/</link>
      <pubDate>2016-03-24 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;sudo brew install erlang&#xA;安装错误:&lt;code&gt;Error: Cowardly refusing to `sudo brew install` for installing&lt;/code&gt;&lt;br /&gt;&#xA;&amp;gt;解决:sudo chown -R $USER /usr/local&lt;/p&gt;&#xA;&#xA;&lt;p&gt;想用户在任何方式进入Erlang Shell时都自动切换到指定的工作目录，则可以在用户目录中的编辑一个.erlang文件  ,如:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;c:cd(&amp;quot;study/erlang&amp;quot;).&#xA;io:format(&amp;quot;My new work in: ~p!n&amp;quot;, [element(2, file:get_cwd())]).&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;erlang声称他们取得了“9个9的可靠性”。&#xA;通过通信来共享内存,是一门面向消息的的函数式编程语言&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;输入erl进入命令行&#xA;&#xA;halt()用于推退出erlang系统,也可以两次command+c&#xA;&#xA;f()用于释放已绑定表达式&#xA;&#xA;X=3. %%正确&#xA;X=4. 报错,此处=不是赋值而是表达式匹配,第一次匹配成功的原因:X未绑定将X和3绑定,再次匹配4的时候直接报错&#xA;&#xA;列表:&#xA;  [First |TheRest] = [1,2,3,4,5].  %%|用于分割列表,First匹配1后面的匹配剩下的&#xA;&#xA;  [A, B | C] = [1, 2].      &#xA;  [1,2]&#xA;  1&amp;gt; A.&#xA;　　1&#xA;  2&amp;gt; B.&#xA;　   2&#xA;  3&amp;gt; C.&#xA;　　[]&#xA;&#xA;-module(tut). %%表示模块名,要和文件名一致  &#xA;&#xA;-export([double/1]).%%可以在其他模块使用, 函数名double参数个数1  &#xA;&#xA;c(tut).%%加载模块c是compiled意思&#xA;&#xA;tut:double(3).%%调用模块方法&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;变量必须是大写字母开头&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;所有原子类型都是以小写字母开头,只是名字没有值&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;数据类型:&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;元组{A,B}&lt;/p&gt;&#xA;&#xA;&lt;p&gt;列表:[A,B] ,列表像其他其他语言的链表&lt;/p&gt;&#xA;&#xA;&lt;p&gt;map:#{&amp;ldquo;key&amp;rdquo;=&amp;gt;42}.&lt;/p&gt;&#xA;&#xA;&lt;p&gt;if&#xA;Condition 1 -&amp;gt;&#xA;    Action 1;&#xA;Condition 2 -&amp;gt;&#xA;    Action 2&#xA;end&#xA;&lt;em&gt;注意，在 end 之前没有 “;”&lt;/em&gt;&lt;br /&gt;&#xA;如果所有条件都测试失败，则会产生运行时错误。一个测试恒为真的条件就是 true。它常用作 if 的最后一个条件，即当所有条件都测试失败时，则执行 true 后面的动作。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;case A of&#xA;     1 -&amp;gt;&#xA;       3;&#xA;     2 -&amp;gt;&#xA;       5&#xA; end&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h2&gt;内置函数:&lt;/h2&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;&lt;p&gt;trunc(5.0)=&amp;gt;5取整函数&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;2004 rem 400=&amp;gt;4 取余函数&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;length用于求列表长度&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;is_tuple判断是否是元组&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h2&gt;高阶函数:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;1&amp;gt; Xf = fun(X) -&amp;gt; X * 2 end.&#xA; #Fun&amp;lt;erl_eval.5.123085357&amp;gt;&#xA;2&amp;gt; Xf(5).&#xA;10&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;lists:map:&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;1&amp;gt; Add_3 = fun(X) -&amp;gt; X + 3 end.&#xA; #Fun&amp;lt;erl_eval.5.123085357&amp;gt;&#xA;2&amp;gt; lists:map(Add_3, [1,2,3]).&#xA;[4,5,6]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>mysql查询优化之索引</title>
      <link>http://sample.com/mysql/mysql%E6%9F%A5%E8%AF%A2%E4%BC%98%E5%8C%96%E4%B9%8B%E7%B4%A2%E5%BC%95/</link>
      <pubDate>2016-03-22 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;系统信息:    CPU： 1核    内存： 2048 MB&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;&lt;code&gt;添加一般索引前查询效率:&lt;/code&gt;&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;./加索引前.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;h2&gt;&lt;code&gt;添加一般索引后查询效率:&lt;/code&gt;&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;./加索引后.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;优化效果还是蛮明显的😄&lt;/code&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>mac下使用Charles爬取安卓app数据</title>
      <link>http://sample.com/mac/mac%E4%B8%8B%E4%BD%BF%E7%94%A8Charles%E7%88%AC%E5%8F%96%E5%AE%89%E5%8D%93app%E6%95%B0%E6%8D%AE/</link>
      <pubDate>2016-03-22 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;原本是想玩Fiddler的,但是得安装虚拟机太麻烦,其他的如tcpdump,wireshark等,依据个人喜好而用。&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://iam42.iteye.com/blog/2186630&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;一,  HTTP包：&lt;/h1&gt;&#xA;&#xA;&lt;h3&gt;1. 安装抓包工具 Charles , &lt;a href=&#34;http://waitsun.ctfile.com/downhtml/138091610/1458642290/1961701742/97686f0b0c08b8e01cd2ae39b2328991.html&#34;&gt;下载&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;破解:应用程序-&amp;gt;显示包内容-&amp;gt;Contents-&amp;gt;Java-&amp;gt;替换charles.jar，然后进入软件，此时显示30天试用，然后在菜单里面选注册，输入用户名和序列号：&#xA;&#xA;Name:&#xA;http://ninjasaga.cheat.center&#xA;&#xA;Serial:&#xA;18e69f6d5bc820d4d3&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;2. 配置手机代理&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;1,ifconfig查看mac ip地址&#xA;&#xA;2,打开手机设置，进入当前wifi连接，设置代理为手动，将服务器填为上一步中获得的IP，端口默认为8888（在charles的proxy setting中可以改这个端口号）。这时Charles弹出确认框，点击Allow按钮即可&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;./代理.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;&#xA;&lt;img src=&#34;./证书安装成功.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;3.中文乱码问题解决&#xA;    在应用程序文件夹找到Charles.app，选择显示包内容, 在charles的content/info.plist 中添加-Dfile.encoding=UTF-8&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;./显示包内容.jpg&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;lt;?xml version=&amp;quot;1.0&amp;quot; ?&amp;gt;&#xA;&amp;lt;!DOCTYPE plist PUBLIC &amp;quot;-//Apple//DTD PLIST 1.0//EN&amp;quot; &amp;quot;http://www.apple.com/DTDs/PropertyList-1.0.dtd&amp;quot;&amp;gt;&#xA;&amp;lt;plist version=&amp;quot;1.0&amp;quot;&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleDevelopmentRegion&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;English&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleExecutable&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;Charles&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleIconFile&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;charles.icns&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleIdentifier&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;com.xk72.Charles&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleDisplayName&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;Charles&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleInfoDictionaryVersion&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;6.0&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleName&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;Charles&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundlePackageType&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;APPL&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleShortVersionString&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;3.11.4&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleVersion&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;3.11.4&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleSignature&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;Chls&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;NSHumanReadableCopyright&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;Charles Web Debugging Proxy http://charlesproxy.com/&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;LSApplicationCategoryType&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;public.app-category.developer-tools&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;NSHighResolutionCapable&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&amp;lt;key&amp;gt;NSSupportsAutomaticGraphicsSwitching&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&amp;lt;key&amp;gt;IgnorePSN&amp;lt;/key&amp;gt;&#xA;&amp;lt;true/&amp;gt;&#xA;&amp;lt;key&amp;gt;JVMRuntime&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;jdk1.8.0_74.jdk&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;JVMVersion&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;1.7&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;JVMMainClassName&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;com.xk72.charles.macosx.gui.Main&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleDocumentTypes&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleTypeExtensions&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;&amp;lt;string&amp;gt;chls&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleTypeIconFile&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;charles_session&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleTypeName&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;Charles saved session&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleTypeRole&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;Editor&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;LSTypeIsPackage&amp;lt;/key&amp;gt;&#xA;&amp;lt;false/&amp;gt;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleTypeExtensions&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;&amp;lt;string&amp;gt;amf&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;amf0&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;amf3&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleTypeIconFile&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;charles_amf&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleTypeName&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;Charles AMF dump&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleTypeRole&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;Editor&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;LSTypeIsPackage&amp;lt;/key&amp;gt;&#xA;&amp;lt;false/&amp;gt;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleTypeExtensions&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;&amp;lt;string&amp;gt;har&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleTypeIconFile&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;charles_session&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleTypeName&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;Charles HAR session&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;CFBundleTypeRole&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;Editor&amp;lt;/string&amp;gt;&#xA;&amp;lt;key&amp;gt;LSTypeIsPackage&amp;lt;/key&amp;gt;&#xA;&amp;lt;false/&amp;gt;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&amp;lt;key&amp;gt;LSArchitecturePriority&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;&amp;lt;string&amp;gt;x86_64&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&amp;lt;key&amp;gt;LSEnvironment&amp;lt;/key&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;&amp;lt;key&amp;gt;LC_CTYPE&amp;lt;/key&amp;gt;&#xA;&amp;lt;string&amp;gt;UTF-8&amp;lt;/string&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;key&amp;gt;JVMOptions&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;&amp;lt;string&amp;gt;-Dfile.encoding=UTF-8&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;-Dcom.apple.mrj.application.live-resize=true&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;-Dapple.laf.useScreenMenuBar=true&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;-Dcom.apple.macos.useScreenMenuBar=true&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;-Dapple.mrj.application.growbox.intrudes=true&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;-Dcom.apple.hwaccel=true&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;-Dswing.aatext=true&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;-Dapple.awt.graphics.UseQuartz=true&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;-Dcharles.config=~/Library/Preferences/com.xk72.charles.config&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;-Dcharles.data=~/Library/Application Support/Charles/&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;-Dcharles.home=$APP_ROOT/Contents&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;-Xdock:icon=$APP_ROOT/Contents/Resources/charles.icns&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;-Xdock:name=Charles&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;-Dcom.apple.mrj.application.apple.menu.about.name=Charles&amp;lt;/string&amp;gt;&#xA;&amp;lt;string&amp;gt;-Xbootclasspath/p:$APP_ROOT/Contents/Java/charles-sni-patch-1.0.jar&amp;lt;/string&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&amp;lt;key&amp;gt;JVMDefaultOptions&amp;lt;/key&amp;gt;&#xA;&amp;lt;dict&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;key&amp;gt;JVMArguments&amp;lt;/key&amp;gt;&#xA;&amp;lt;array&amp;gt;&#xA;&amp;lt;/array&amp;gt;&#xA;&amp;lt;/dict&amp;gt;&#xA;&amp;lt;/plist&amp;gt;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;HTTPS抓包:&lt;/h1&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;下载Charles证书&lt;a href=&#34;http://www.charlesproxy.com/assets/legacy-ssl/charles.crt&#34;&gt;http://www.charlesproxy.com/assets/legacy-ssl/charles.crt&lt;/a&gt; ,导入到手机中,点击证书命名即可,点击查看受信任的凭据,在用户选项卡可以看见证书&lt;/li&gt;&#xA;&lt;li&gt;在Charles的工具栏上点击Proxy；选择SSL Proxying Settings&amp;hellip; 切换到SSL选项卡，选中Enable SSL Proxying，选项卡的Locations表单可以填写要抓包的域名和端口，点击Add按钮，在弹出的表单中Host填写域名，比如填api.instagram.com，Port填443。如果不填直接确定则为＊表示匹配所有&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;接下来就可以随意玩耍了&lt;/strong&gt;😄&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;&lt;code&gt;可以使用该工具方便开发,不要干坏事哦~～&lt;/code&gt;&lt;/h1&gt;&#xA;</description>
    </item>
    <item>
      <title>ddos检测与防御</title>
      <link>http://sample.com/linux/ddos%E6%A3%80%E6%B5%8B%E4%B8%8E%E9%98%B2%E5%BE%A1/</link>
      <pubDate>2016-03-21 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;方法一:iptables(需要手动添加)&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;方法二:DDoS deflate 可以自动屏蔽ip&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;通过netstat监测跟踪创建大量网络连接的IP地址，在检测到某个结点超过预设的限 制时，该程序会通过APF或IPTABLES禁止或阻挡这些IP.&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;如何确认是否受到DDOS攻击？&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;执行：netstat -ntu | awk &#39;{print $5}&#39; | cut -d: -f1 | sort | uniq -c | sort -n&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;执行后，将会显示服务器上所有的每个IP多少个连接数。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;每个IP几个、十几个或几十个连接数都还算比较正常，如果像上面成百上千肯定就不正常了。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;1、安装DDoS deflate&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;wget http://www.inetbase.com/scripts/ddos/install.sh //下载DDoS deflate&#xA;chmod 0700 install.sh //添加权限&#xA;./install.sh //执行 &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;安装: &lt;img src=&#34;../ddos.jpg&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;&#xA;2、配置DDoS deflate(DDoS deflate的默认配置位于/usr/local/ddos/ddos.conf )&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;PROGDIR=&amp;quot;/usr/local/ddos&amp;quot;&#xA;&#xA;PROG=&amp;quot;/usr/local/ddos/ddos.sh&amp;quot;&#xA;&#xA;IGNORE_IP_LIST=&amp;quot;/usr/local/ddos/ignore.ip.list&amp;quot; //IP地址白名单&#xA;&#xA;CRON=&amp;quot;/etc/cron.d/ddos.cron&amp;quot; //定时执行程序&#xA;&#xA;APF=&amp;quot;/etc/apf/apf&amp;quot;&#xA;&#xA;IPT=&amp;quot;/sbin/iptables&amp;quot;&#xA;&#xA;FREQ=1 //检查配置时间间隔，默认1分钟&#xA;&#xA;NO_OF_CONNECTIONS=150 //最大连接数，超过这个数IP就会被屏蔽，一般默认即可&#xA;##### APF_BAN=1 (Make sure your APF version is atleast 0.96)&#xA;##### APF_BAN=0 (Uses iptables for banning ips instead of APF)&#xA;&#xA;APF_BAN=1 //使用APF还是iptables，推荐使用iptables&#xA;&#xA;KILL=1 //是否屏蔽IP，默认即可&#xA;&#xA;EMAIL_TO=&amp;quot;1679550318@qq.com&amp;quot; //当IP被屏蔽时给指定邮箱发送邮件，推荐使用，换成自己的邮箱即可&#xA;&#xA;BAN_PERIOD=600 //禁用IP时间，默认600秒，可根据情况调整 &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>防火墙导致服务器无法访问</title>
      <link>http://sample.com/linux/%E9%98%B2%E7%81%AB%E5%A2%99%E5%AF%BC%E8%87%B4%E6%9C%8D%E5%8A%A1%E5%99%A8%E6%97%A0%E6%B3%95%E8%AE%BF%E9%97%AE/</link>
      <pubDate>2016-03-01 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;通过下面的命令可以开启允许对外访问的网络端口：&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/sbin/iptables -I INPUT -p tcp --dport 8011 -j ACCEPT #开启8011端口 &#xA;&#xA;/etc/rc.d/init.d/iptables save #保存配置 &#xA;&#xA;/etc/rc.d/init.d/iptables restart #重启服务&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;查看端口是否已经开放&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/etc/init.d/iptables status &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>docker-mac</title>
      <link>http://sample.com/docker/docker-mac/</link>
      <pubDate>2016-03-01 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/oopsoom/article/details/41785999&#34;&gt;Docker下载及安装:mac osx&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://yeasy.gitbooks.io/docker_practice/content/&#34;&gt;Docker从入门到实战&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;问题: &lt;code&gt;FATA[0000] Get http:///var/run/docker.sock/v1.16/version: dial unix /var/run/docker.sock: no such file or directory. Are you trying to connect to a TLS-enabled daemon without TLS?&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;方法一:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;找到boot2docker应用程序启动&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;方法二:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$(/usr/local/bin/boot2docker shellinit)  &#xA;&#xA;Alan:~ user03$ $(/usr/local/bin/boot2docker shellinit)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;Writing /Users/user03/.boot2docker/certs/boot2docker-vm/ca.pem&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Writing /Users/user03/.boot2docker/certs/boot2docker-vm/cert.pem&lt;/p&gt;&#xA;&#xA;&lt;p&gt;Writing /Users/user03/.boot2docker/certs/boot2docker-vm/key.pem&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Alan:~ user03$ boot2docker ssh&#xA;&#xA;                    ##        .&#xA;&#xA;              ## ## ##       ==&#xA;&#xA;           ## ## ## ##      ===&#xA;&#xA;       /&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;&amp;quot;\___/ ===&#xA;&#xA;  ~~~ {~~ ~~~~ ~~~ ~~~~ ~~ ~ /  ===- ~~~&#xA;&#xA;       \______ o          __/&#xA;&#xA;         \    \        __/&#xA;&#xA;          \____\______/&#xA;&#xA; _                 _   ____     _            _&#xA;&#xA;| |__   ___   ___ | |_|___ \ __| | ___   ___| | _____ _ __&#xA;&#xA;| &#39;_ \ / _ \ / _ \| __| __) / _` |/ _ \ / __| |/ / _ \ &#39;__|&#xA;&#xA;| |_) | (_) | (_) | |_ / __/ (_| | (_) | (__|   &amp;lt;  __/ |&#xA;&#xA;|_.__/ \___/ \___/ \__|_____\__,_|\___/ \___|_|\_\___|_|&#xA;&#xA;Boot2Docker version 1.4.1, build master : 86f7ec8 - Tue Dec 16 23:11:29 UTC 2014&#xA;&#xA;Docker version 1.4.1, build 5bc2ff8&#xA;&#xA;docker@boot2docker:~$ &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;成功!!!&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;### io/timeout问题&lt;/p&gt;&#xA;&#xA;&lt;h4&gt;boot2docker ssh &amp;lsquo;echo EXTRA_ARGS=\’’—insecure-registry dl.dockerpool.com:5000\” | sudo tee /var/lib/boot2docker/profile&amp;rsquo;&lt;/h4&gt;&#xA;</description>
    </item>
    <item>
      <title>win7 ssh</title>
      <link>http://sample.com/win7/win7-ssh/</link>
      <pubDate>2016-02-27 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;1、下载： openssh for Winodws:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;免费下载地址在 &lt;em&gt;&lt;a href=&#34;http://linux.linuxidc.com/&#34;&gt;http://linux.linuxidc.com/&lt;/a&gt;&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;用户名与密码都是 &lt;em&gt;www.linuxidc.com&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;具体下载目录在 /2014年资料/2月/14日/Windows 7命令行下使用SSH通过秘钥登录Linux&lt;/p&gt;&#xA;&#xA;&lt;p&gt;下载方法见 &lt;a href=&#34;http://www.linuxidc.com/Linux/2013-07/87684.htm&#34;&gt;http://www.linuxidc.com/Linux/2013-07/87684.htm&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;2、安装： 下一步&amp;gt;&amp;gt;&amp;gt;&amp;hellip;完成..&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;3、Windows环境变量：&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;右键计算机--&amp;gt;属性--&amp;gt;高级系统设置--&amp;gt;环境变量--&amp;gt;系统变量：编辑Path，在行尾追加 ;C:\Program Files (x86)\OpenSSH for Windows\bin --&amp;gt;各种确定即可&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://www.linuxidc.com/Linux/2014-02/96625.htm&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>win7 ls功能</title>
      <link>http://sample.com/win7/win7-ls%E5%8A%9F%E8%83%BD/</link>
      <pubDate>2016-02-27 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;1.首先，在系统桌面新建一个“文本文档”，然后，将以下内容复制进入：&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  @echo off   &#xA;  dir  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;2.接下来，将该新建文档“另存为”，并命名为“ls.bat”，保存类型为“所有文件”，然后，点击“保存”按钮即可。&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;3.返回桌面，可以﻿看到刚刚新建了一个批处理文件，接下来，将该批处理文件复制到，C\Windows文件夹目录中即可，这种，ls命令就可以正常使用了。&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;../ls.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>linux 让进程在后台可靠运行的几种方法</title>
      <link>http://sample.com/linux/linux-%E8%AE%A9%E8%BF%9B%E7%A8%8B%E5%9C%A8%E5%90%8E%E5%8F%B0%E5%8F%AF%E9%9D%A0%E8%BF%90%E8%A1%8C%E7%9A%84%E5%87%A0%E7%A7%8D%E6%96%B9%E6%B3%95/</link>
      <pubDate>2016-02-27 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.ibm.com/developerworks/cn/linux/l-cn-nohup&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;1. nohup(让提交的命令忽略HangUp信号)&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;当用户注销（logout）或者网络断开时，终端会收到 HUP（hangup）信号从而关闭其所有子进程。&#xA;因此，我们的解决办法就有两种途径:&lt;br /&gt;&#xA;- 要么让进程忽略 HUP 信号，&lt;br /&gt;&#xA;- 要么让进程运行在新的会话里从而成为不属于此终端的子进程。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    nohup ping www.ibm.com &amp;amp;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;2,setsid&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;setsid ping www.ibm.com&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;3,使用screen&lt;/h2&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;screen -S  (command+A+D)&lt;/li&gt;&#xA;&lt;li&gt;screen -r&lt;/li&gt;&#xA;&lt;li&gt;screen -ls&lt;br /&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;h2&gt;pstree -H 9488  //用于查看进程树&lt;/h2&gt;&#xA;</description>
    </item>
    <item>
      <title>go国际化本地化</title>
      <link>http://sample.com/go/go%E5%9B%BD%E9%99%85%E5%8C%96%E6%9C%AC%E5%9C%B0%E5%8C%96/</link>
      <pubDate>2016-02-27 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;1,通过url参数形式:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;www.demo.com?locale=zh 或  www.demo.com/zh/user   形式  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;2,通过获取客户端请求头信息&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;lang=r.Header.Get(&amp;quot;Accept-Language&amp;quot;)  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;3,通过IP库查询获取国家和地区信息&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;4,用户profile&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;将用户通过下拉菜单或其他方式设置的locale存储起来,下次登录的时候在读取出来国际化  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>golang 文件夹权限坑</title>
      <link>http://sample.com/go/golang-%E6%96%87%E4%BB%B6%E5%A4%B9%E6%9D%83%E9%99%90%E5%9D%91/</link>
      <pubDate>2016-02-27 12:00:00 +0800</pubDate>
      <description>&lt;pre&gt;&lt;code&gt;package main  &#xA;&#xA;import (  &#xA;  &amp;quot;fmt&amp;quot;  &#xA;  &amp;quot;os&amp;quot;  &#xA;)  &#xA;&#xA;func main() {  &#xA;    err := os.MkdirAll(&amp;quot;/tmp/gotest/&amp;quot;, 0777)  &#xA;    if err != nil {   &#xA;      panic(err)  &#xA;    }  &#xA;    fmt.Println(&amp;quot;Mkdir /tmp/gotest/&amp;quot;)  &#xA;}  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;运行结果&lt;/strong&gt;:&lt;em&gt;文件夹的权限还是系统默认的755&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;正确做法&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;package main&#xA;&#xA;import (&#xA;  &amp;quot;fmt&amp;quot;&#xA;  &amp;quot;os&amp;quot;&#xA;  &amp;quot;syscall&amp;quot;&#xA;)&#xA;&#xA;func main() {&#xA;    mask := syscall.Umask(0)&#xA;    defer syscall.Umask(mask)&#xA;    err := os.MkdirAll(&amp;quot;/tmp/gotest/&amp;quot;, 0777)&#xA;    if err != nil {&#xA;      panic(err)&#xA;    }&#xA;    fmt.Println(&amp;quot;Mkdir /tmp/gotest/&amp;quot;)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;注意事项&lt;/h2&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;这并不是Go的Bug，包括Linux系统调用都是这样的，创建目录除了给定的权限还要加上系统的Umask，Go也是如实遵循这种约定。&lt;/p&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;Umask是权限的补码,用于设置创建文件和文件夹默认权限的,一般在 &lt;strong&gt;/etc/profile&lt;/strong&gt;中或 &lt;strong&gt;$HOME/profile&lt;/strong&gt;或 &lt;strong&gt;$HOME/.bash_profile&lt;/strong&gt;中&lt;/p&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>go在函数内部获取函数本身信息</title>
      <link>http://sample.com/go/go%E5%9C%A8%E5%87%BD%E6%95%B0%E5%86%85%E9%83%A8%E8%8E%B7%E5%8F%96%E5%87%BD%E6%95%B0%E6%9C%AC%E8%BA%AB%E4%BF%A1%E6%81%AF/</link>
      <pubDate>2016-02-25 12:00:00 +0800</pubDate>
      <description>&lt;pre&gt;&lt;code&gt;type Person struct {  &#xA;    Name string  &#xA;    Age  int  &#xA;}&#xA;&#xA;&#xA;func (this *Person) Eat(food string) {&#xA;   fmt.Println(&amp;quot;eatting :&amp;quot;, food)&#xA;}&#xA;&#xA;&#xA;func (this *Person) SayHi(name string, age int) {&#xA;   rvalue := reflect.ValueOf(this)&#xA;   rtype := reflect.TypeOf(this)&#xA;   for i := 0; i &amp;lt; rvalue.NumMethod(); i++ {&#xA;      methodType := reflect.TypeOf(reflect.ValueOf(this).Method(i).Interface())&#xA;      //methodValue := reflect.ValueOf(reflect.ValueOf(this).Method(i).Interface())&#xA;      fmt.Println(&amp;quot;函数名:&amp;quot;, rtype.Method(i).Name)&#xA;      fmt.Println(&amp;quot;参数个数:&amp;quot;, methodType.NumIn())&#xA;      for j := 0; j &amp;lt; methodType.NumIn(); j++ {&#xA;         fmt.Printf(&amp;quot;参数索引:%v\r\n参数类型:%v\r\n&amp;quot;, j, methodType.In(j).Name())&#xA;      }&#xA;   }&#xA;}&#xA;&#xA;&#xA;func TestReflectMethod(t *testing.T) {&#xA;   p := &amp;amp;Person{}&#xA;   p.SayHi(&amp;quot;leo&amp;quot;, 23)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>go https</title>
      <link>http://sample.com/go/go-https/</link>
      <pubDate>2016-02-25 12:00:00 +0800</pubDate>
      <description>&lt;pre&gt;&lt;code&gt;$ openssl genrsa -out server.key 2048 // private key  &#xA;$ openssl req -new -x509 -key server.key -out server.crt -days 365 //self-signed certificate  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;//省略证书校验(一般用于测试)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;tr := &amp;amp;http.Transport{  &#xA;   TLSClientConfig: &amp;amp;tls.Config{InsecureSkipVerify: true},  &#xA;}  &#xA;&#xA;client := &amp;amp;http.Client{Transport: tr}  &#xA;resp, err := client.Get(&amp;quot;https://localhost:8081&amp;quot;)  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;可以使用&lt;strong&gt;openssl x509 -text -in client.crt -noout&lt;/strong&gt; 查看某个证书文件所包含的具体信息。&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;a href=&#34;http://www.tuicool.com/articles/6JJj2az&#34;&gt;资料1&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;&lt;a href=&#34;http://studygolang.com/articles/3175&#34;&gt;资料2&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;&lt;a href=&#34;https://github.com/bigwhite/experiments/tree/master/gohttps&#34;&gt;gthub代码示例:&lt;/a&gt;&lt;/h2&gt;&#xA;</description>
    </item>
    <item>
      <title>mongodb page split</title>
      <link>http://sample.com/mongodb/mongodb-page-split/</link>
      <pubDate>2016-02-24 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;示例:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;var lastest=null;&#xA;&#xA;while(page1.HasNext()){&#xA;    lastest=page1.Next();&#xA;}&#xA;&#xA;var page2=db.foo.find({&amp;quot;date&amp;quot;:{&amp;quot;date&amp;quot;:{&amp;quot;$gt&amp;quot;:lastest.date}});&#xA;&#xA;page2.sort({&amp;quot;date“：-1}).limit(100);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>mongodb basic point</title>
      <link>http://sample.com/mongodb/mongodb-basic-point/</link>
      <pubDate>2016-02-24 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;a href=&#34;http://www.yiibai.com/mongodb/mongodb_create_database.html&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;1,试了试 mongodb 的 insert()、save()  ，区别主要是：若存在主键，insert()  不做操作，而save() 则更改原来的内容为新内容。&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;存在数据：  { _id : 1, &amp;ldquo; name &amp;rdquo; : &amp;ldquo; n1 &amp;rdquo; }&lt;/p&gt;&#xA;&#xA;&lt;p&gt;insert({ _id : 1, &amp;ldquo; name &amp;rdquo; : &amp;ldquo; n2 &amp;rdquo; })    会提示错误&lt;/p&gt;&#xA;&#xA;&lt;p&gt;save({ _id : 1, &amp;ldquo; name &amp;rdquo; : &amp;ldquo; n2 &amp;rdquo; })     会把 n1 改为  n2  。&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;2,创建与使用数据库,use命令,当数据库不存在则创建数据库,新建数据库时show dbs看不见,要显示的数据库，需要把它插入至少一个文件。&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;3,删除数据库,想要删除名为demo的数据库:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;use demo   &#xA;db.dropDatabase()  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;4,更新多条数据:MongoDB默认将只更新单一的文件，来更新多个你需要设置参数置&amp;rsquo;multi&amp;rsquo; 为true&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;db.mycol.update({&#39;title&#39;:&#39;MongoDB Overview&#39;},{$set:{&#39;title&#39;:&#39;New MongoDB Tutorial&#39;}},{multi:true}) &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;5,mongod   --rest 会有web控制台&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;6,$all匹配所有,类似$in不同的是$in只需匹配一个而$all则需匹配所有&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;7,$exists判断存在&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;如查询所有存在age字段的纪录：db.user.find({age:{$exists:true}}) &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;8,$mod取模运算&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;如查询age取模10等于1的数据:    db.student.find({age:{$mod:[10,1]}}) &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;9,$nin与$in相反&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;如查询x的值不在2、4、6范围内的数据：db.things.find({x:{$nin:[2,4,6]}}) &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;10,$size匹配数组元素个数&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;11,sort排序&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;如按照age升序排列： db.users.find().sort({age:1}) &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;12,游标：&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;1）与大多数数据库产品一样，MongoDb也是用游标来循环处理每一条结果数据  &#xA;&#xA;for（var c=db.t1.find();c.hasNext();）{printjson(c.next())}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;2）forEach方式处理游标&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;db.t3.find().forEach(function(u){printjson(u);})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;13,存储过程：存储在db.system.js表中，执行使用db.eval(&amp;lsquo;存储过程名称&amp;rsquo;)&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;db.system.js.save({_id:&amp;quot;get_count&amp;quot;,value:function(){return db.c1.count();}})&#xA;db.eval(&#39;get_count()&#39;) &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;14, 数据更新操作:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;1）$inc&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;用法：{$inc:{field:value}},对一个数字字段的某个field增加value&#xA;更新前：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe096e88a6e072b231ca5c9&amp;quot;), &amp;quot;name&amp;quot; : &amp;quot;liangzhangping&amp;quot;, &amp;quot;age&amp;quot; : 30 }&#xA;操作：db.t3.update({name:&amp;quot;liangzhangping&amp;quot;},{$inc:{age:5}})&#xA;更新后：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe096e88a6e072b231ca5c9&amp;quot;), &amp;quot;name&amp;quot; : &amp;quot;liangzhangping&amp;quot;, &amp;quot;age&amp;quot; : 35 }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;2）$set&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;用法：{$set:{field:value}},类似于SQL语法中“set field=value”&#xA;更新前：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe096e88a6e072b231ca5c9&amp;quot;), &amp;quot;name&amp;quot; : &amp;quot;liangzhangping&amp;quot;, &amp;quot;age&amp;quot; : 30 }&#xA;操作：db.t3.update({name:&amp;quot;liangzhangping&amp;quot;},{$set:{age:28}})&#xA;更新后：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe096e88a6e072b231ca5c9&amp;quot;), &amp;quot;name&amp;quot; : &amp;quot;liangzhangping&amp;quot;, &amp;quot;age&amp;quot; : 28 }    &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;3）$unset&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;用法：{$unset:{field:1}},删除字段，类似于SQL语法中删除列&#xA;更新前：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe096e88a6e072b231ca5c9&amp;quot;), &amp;quot;name&amp;quot; : &amp;quot;liangzhangping&amp;quot;, &amp;quot;age&amp;quot; : 30 }&#xA;操作：db.t3.update({name:&amp;quot;liangzhangping&amp;quot;},{$unset:{age:1}})&#xA;更新后：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe096e88a6e072b231ca5c9&amp;quot;), &amp;quot;name&amp;quot; : &amp;quot;liangzhangping&amp;quot; }  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;4）$push&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;用法：{$push:{field:value}},把value追加到field里。field一定是数组类型，如果field不存在，会新增一个&#xA;更新前：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe098f08a6e072b231ca5ca&amp;quot;), &amp;quot;userid&amp;quot; : 3, &amp;quot;name&amp;quot; : [ &amp;quot;liangzhangping&amp;quot;, &amp;quot;lzp&amp;quot; ] }&#xA;操作：db.t3.update({&amp;quot;userid&amp;quot;:3},{$push:{name:&amp;quot;xiaoping&amp;quot;}})&#xA;更新后：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe098f08a6e072b231ca5ca&amp;quot;), &amp;quot;name&amp;quot; : [ &amp;quot;liangzhangping&amp;quot;, &amp;quot;lzp&amp;quot;, &amp;quot;xiaoping&amp;quot; ], &amp;quot;userid&amp;quot; : 3 }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;5）$pushAll&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;用法：{$push:{field:value_array}},用法同$push一样，只是$pushAll一次可以追加多个值到一个数组字段内&#xA;更新前：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe098f08a6e072b231ca5ca&amp;quot;), &amp;quot;name&amp;quot; : [ &amp;quot;liangzhangping&amp;quot;, &amp;quot;lzp&amp;quot;, &amp;quot;xiaoping&amp;quot; ], &amp;quot;userid&amp;quot; : 3 }&#xA;操作：db.t3.update({&amp;quot;userid&amp;quot;:3},{$pushAll:{name:[&amp;quot;N1&amp;quot;,&amp;quot;N2&amp;quot;]}})&#xA;更新后：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe098f08a6e072b231ca5ca&amp;quot;), &amp;quot;name&amp;quot; : [ &amp;quot;liangzhangping&amp;quot;, &amp;quot;lzp&amp;quot;, &amp;quot;xiaoping&amp;quot;, &amp;quot;N1&amp;quot;, &amp;quot;N2&amp;quot; ], &amp;quot;userid&amp;quot; : 3 }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;6）$addToSet&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;用法：{$addToSet:{field:value}},加一个值到数组内，而且只有当这个值不在数组内才增加&#xA;更新前：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe098f08a6e072b231ca5ca&amp;quot;), &amp;quot;name&amp;quot; : [ &amp;quot;liangzhangping&amp;quot;, &amp;quot;lzp&amp;quot;, &amp;quot;xiaoping&amp;quot;, &amp;quot;N1&amp;quot;, &amp;quot;N2&amp;quot; ], &amp;quot;userid&amp;quot; : 3 }&#xA;操作：db.t3.update({&amp;quot;userid&amp;quot;:3},{$addToSet:{name:&amp;quot;N1&amp;quot;}})&#xA;更新后：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe098f08a6e072b231ca5ca&amp;quot;), &amp;quot;name&amp;quot; : [ &amp;quot;liangzhangping&amp;quot;, &amp;quot;lzp&amp;quot;, &amp;quot;xiaoping&amp;quot;, &amp;quot;N1&amp;quot;, &amp;quot;N2&amp;quot; ], &amp;quot;userid&amp;quot; : 3 }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;7）$pop&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;用法：{$pop:{field:[1,-1]}},删除数组内的一个值，-1：删除第一个，1：删除最后一个&#xA;更新前：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe098f08a6e072b231ca5ca&amp;quot;), &amp;quot;name&amp;quot; : [ &amp;quot;liangzhangping&amp;quot;, &amp;quot;lzp&amp;quot;, &amp;quot;xiaoping&amp;quot;, &amp;quot;N1&amp;quot;, &amp;quot;N2&amp;quot; ], &amp;quot;userid&amp;quot; : 3 }&#xA;操作：db.t3.update({&amp;quot;userid&amp;quot;:3},{$pop:{name:-1}})&#xA;更新后：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe098f08a6e072b231ca5ca&amp;quot;), &amp;quot;name&amp;quot; : [ &amp;quot;lzp&amp;quot;, &amp;quot;xiaoping&amp;quot;, &amp;quot;N1&amp;quot;, &amp;quot;N2&amp;quot; ], &amp;quot;userid&amp;quot; : 3 }                &#xA;操作：db.t3.update({&amp;quot;userid&amp;quot;:3},{$pop:{name:1}})&#xA;更新后：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe098f08a6e072b231ca5ca&amp;quot;), &amp;quot;name&amp;quot; : [ &amp;quot;lzp&amp;quot;, &amp;quot;xiaoping&amp;quot;, &amp;quot;N1&amp;quot; ], &amp;quot;userid&amp;quot; : 3 }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;8）$pull&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;用法：{$pull:{field:value}},从数组filed内删除一个等于value的值&#xA;更新前：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe098f08a6e072b231ca5ca&amp;quot;), &amp;quot;name&amp;quot; : [ &amp;quot;lzp&amp;quot;, &amp;quot;xiaoping&amp;quot;, &amp;quot;N1&amp;quot; ], &amp;quot;userid&amp;quot; : 3 }&#xA;操作：db.t3.update({&amp;quot;userid&amp;quot;:3},{$pull:{name:&amp;quot;N1&amp;quot;}})&#xA;更新后：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe098f08a6e072b231ca5ca&amp;quot;), &amp;quot;name&amp;quot; : [ &amp;quot;lzp&amp;quot;, &amp;quot;xiaoping&amp;quot; ], &amp;quot;userid&amp;quot; : 3 }     &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;9）$pullAll&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;用法：{$pullAll:{field:value_array}},用法同$pull一样，可以一次删除数组内的多个值&#xA;更新后：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe098f08a6e072b231ca5ca&amp;quot;), &amp;quot;name&amp;quot; : [ &amp;quot;lzp&amp;quot;, &amp;quot;xiaoping&amp;quot; ], &amp;quot;userid&amp;quot; : 3 } &#xA;操作：db.t3.update({&amp;quot;userid&amp;quot;:3},{$pullAll:{name:[&amp;quot;lzp&amp;quot;, &amp;quot;xiaoping&amp;quot;]}})&#xA;更新后：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe098f08a6e072b231ca5ca&amp;quot;), &amp;quot;name&amp;quot; : [ ], &amp;quot;userid&amp;quot; : 3 }      &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;10）$rename&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;用法：{$rename:{old_field_name:new_field_name}},完成字段的重命名&#xA;更新后：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe098f08a6e072b231ca5ca&amp;quot;), &amp;quot;name&amp;quot; : [ ], &amp;quot;userid&amp;quot; : 3 }   &#xA;操作：db.t3.update({&amp;quot;userid&amp;quot;:3},{$rename:{name:&amp;quot;alias&amp;quot;}})&#xA;更新后：{ &amp;quot;_id&amp;quot; : ObjectId(&amp;quot;4fe098f08a6e072b231ca5ca&amp;quot;), &amp;quot;alias&amp;quot; : [ ], &amp;quot;userid&amp;quot; : 3 }  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>mongodb-Deploy a Sharded Cluster</title>
      <link>http://sample.com/mongodb/mongodb-Deploy-a-Sharded-Cluster/</link>
      <pubDate>2016-02-24 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;a href=&#34;http://blog.csdn.net/irelandken/article/details/8003315&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;2个Standard节点+1个Arbiter节点 搭建MongoDB Replication Sets&lt;/h3&gt;&#xA;&#xA;&lt;h1&gt;1,创建目录&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[root@localhost ~]# mkdir -p /data/replset/r0  &#xA;[root@localhost ~]# mkdir -p /data/replset/r1  &#xA;[root@localhost ~]# mkdir -p /data/replset/r2  &#xA;[root@localhost ~]# mkdir -p /data/replset/key  &#xA;[root@localhost ~]# mkdir -p /data/replset/log  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;2,创建KEY&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;[root@localhost ~]# echo &amp;quot;replset1 key&amp;quot; &amp;gt; /data/replset/key/r0  &#xA;[root@localhost ~]# echo &amp;quot;replset1 key&amp;quot; &amp;gt; /data/replset/key/r1  &#xA;[root@localhost ~]# echo &amp;quot;replset1 key&amp;quot; &amp;gt; /data/replset/key/r2  &#xA;[root@localhost ~]# chmod 600 /data/replset/key/r*  //600，防止其它程序改写此KEY  &#xA;&#xA;mongod --dbpath=/data/replset/r0 --replSet replset1 --keyFile /data/replset/key/r0 --port 28010//一定要加keyFile!!!&#xA;&#xA;mongod --dbpath=/data/replset/r1 --replSet replset1 --keyFile /data/replset/key/r1 --port 28011&#xA;&#xA;mongod --dbpath=/data/replset/r2 --replSet replset1 --keyFile /data/replset/key/r2 --port 28012&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;初始化复本集：&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mongo --port 28010&#xA;&#xA;config_replset1 = {  &#xA;_id:&amp;quot;replset1&amp;quot;,  &#xA;members:  &#xA;[  &#xA;{_id:0,host:&amp;quot;127.0.0.1:28010&amp;quot;,priority:4},  &#xA;{_id:1,host:&amp;quot;127.0.0.1:28011&amp;quot;,priority:2},  &#xA;{_id:2,host:&amp;quot;127.0.0.1:28012&amp;quot;,arbiterOnly : true}  &#xA;]  &#xA;}  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;注意arbiter仲裁节点只投票,不接收复制的数据!&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;rs.initiate(config_replset1);&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;配置SECONDARY的slaveOk,使其读:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mongo --port 28011&#xA;rs.slaveOk()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;//向PRIMARY写入一条数据  SECONDARY  同步&lt;br /&gt;&#xA;//SECONDARY不能写,而设置slaveOk后,可以从SECONDARY读取数据&lt;br /&gt;&#xA;默认情况下SECONDARY不能读写，要设定db.getMongo().setSlaveOk();才可以从SECONDARY读取&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;replset1:SECONDARY&amp;gt; db.mydb.find()&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;error: { &amp;quot;$err&amp;quot; : &amp;quot;not master and slaveOk=false&amp;quot;, &amp;quot;code&amp;quot; : 13435 }&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;执行:  rs.slaveOk()即可&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;replSet里只能有一个Primary库，只能从Primary写数据，不能向SECONDARY写数据&lt;/p&gt;&#xA;&#xA;&lt;p&gt;启动Config Server:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Config Server : 40000&#xA;&#xA;mkdir -p /data/mixreplset/shard/config&#xA;&#xA;mongod --dbpath /data/mixreplset/shard/config --configsvr --port 40000 --directoryperdb --rest&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;启动Route Process:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Route Process : 50000&#xA;&#xA;/Apps/mongo/bin/mongos --port 50000 --configdb 127.0.0.1:40000 --chunkSize 1 &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;--chunkSize 1 (MB)指定分片的最小单位容量，这里设置1M，方便查看效果&lt;/p&gt;&#xA;&#xA;&lt;p&gt;连接到mongos配置Sharding&lt;/p&gt;&#xA;&#xA;&lt;p&gt;用Mongo Shell 登录 Route Process&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;/Apps/mongo/bin/mongo --port 50000&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;use admin (记得执行这一点,切换到admin数据库)&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;//添加分片节点,将副本集作为一个节点添加&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;注意添加副本集作为一个分片时,格式有点不同!&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;mongos&amp;gt;   db.runCommand({addshard:&amp;quot;replset1/127.0.0.1:28010,127.0.0.1:28011,127.0.0.1:28012&amp;quot;,allowLocal:true})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;(allowLocal:true仅仅开发时才将分片配置到本地)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;故障切换能力测试&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;use mydb&#xA;&#xA;db.users.insert({name:&amp;quot;jack&amp;quot;,age:0,addr:&amp;quot;guangzhou&amp;quot;,country:&amp;quot;China&amp;quot;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;测试插入100万条数据&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for(var i=1; i&amp;lt;=1000000; i++) db.users.insert({name:&amp;quot;jack&amp;quot;,age:i,addr:&amp;quot;guangzhou&amp;quot;,country:&amp;quot;China&amp;quot;})&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;然后插入到30万条时停止28010(Primary)的进程&lt;/p&gt;&#xA;&#xA;&lt;p&gt;然后replset1马上切换到28012(PRIMARY)注:选择主服务器是随机的所以我这边没有直接变成28011&lt;/p&gt;&#xA;&#xA;&lt;p&gt;(杀掉28010端口的Mongodb进程:ps -ef |grep mongod)&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;增加节点:(一种是通过oplog增加节点，另一种通过数据库快照和oplog添加节点)&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;1,通过oplog增加节点&#xA;        a,启动一个新节点&#xA;        b, 添加新节点到现有Replica Set是中，如：rs.add(&amp;quot;localhost:28013&amp;quot;)&#xA;        c、查看复制状态，可以看到新节点，但状态为不可用，因为还未数据同步&#xA;        d、执行数据同步（自动） 之后新节点即可使用&#xA; 2,通过数据库快照和oplog增加节点:&#xA;          a、取某一个复制集成员的物理文件作为初始化数据，操作如下：&#xA;                            scp -r /app/mongo/mongodb/data/sets/r3 /app/mongo/mongodb/data/sets/r4   //   /app/mongo/mongodb/data/sets/r3为dbpath&#xA;                            echo &amp;quot;test Sets&amp;quot; &amp;gt; /app/mongo/mongodb/data/sets/key/r4&#xA;                            chmod 600 /app/mongo/mongodb/data/sets/key/r4 &#xA;           b,新开28014端口,然后插入查询数据,再新插入一条再查询 &#xA;           c,添加28014节点到现有的复制集中，如下所示：&#xA;                            PRIMARY&amp;gt; rs.add(&amp;quot;localhost:28014&amp;quot;)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;减少节点:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;rs.remove(&amp;quot;localhost:28013&amp;quot;) &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>go外部包操作非导出字段</title>
      <link>http://sample.com/go/go%E5%A4%96%E9%83%A8%E5%8C%85%E6%93%8D%E4%BD%9C%E9%9D%9E%E5%AF%BC%E5%87%BA%E5%AD%97%E6%AE%B5/</link>
      <pubDate>2016-02-24 12:00:00 +0800</pubDate>
      <description>&lt;pre&gt;&lt;code&gt;type Template struct {&#xA;   name string&#xA;   *parse.Tree&#xA;   *common&#xA;   leftDelim  string&#xA;   rightDelim string&#xA;}&#xA;&#xA;&#xA;type common struct {&#xA;   tmpl       map[string]*Template&#xA;   parseFuncs template.FuncMap&#xA;   execFuncs  map[string]reflect.Value&#xA;}&#xA;&#xA;&#xA;func TestDemo(t *testing.T) {&#xA;   tpl := template.New(&amp;quot;Foo&amp;quot;)&#xA;   p := (*Template)(unsafe.Pointer(tpl))&#xA;   p.name = &amp;quot;Bar&amp;quot; // 关键在这里，突破私有成员&#xA;   logger.Debug(&amp;quot;%v:%v&amp;quot;, p, tpl)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;输出结果&lt;/h2&gt;&#xA;&#xA;&lt;h1&gt;&amp;amp;{Bar &lt;nil&gt; &lt;nil&gt;  } &amp;amp;{Bar &lt;nil&gt; &lt;nil&gt;  }&lt;/h1&gt;&#xA;&#xA;&lt;h1&gt;&lt;strong&gt;t.name&lt;/strong&gt; 也变成 &lt;strong&gt;Bar&lt;/strong&gt;了, 成功突破template.Template私有字段 name&lt;/h1&gt;&#xA;</description>
    </item>
    <item>
      <title>go加密算法测试总结</title>
      <link>http://sample.com/go/go%E5%8A%A0%E5%AF%86%E7%AE%97%E6%B3%95%E6%B5%8B%E8%AF%95%E6%80%BB%E7%BB%93/</link>
      <pubDate>2016-02-24 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;一:各种加解密执行效率对比 ,每种操作总执行次数1万次&lt;/h1&gt;&#xA;&#xA;&lt;h2&gt;1,des:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;加密&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    32.8221828s(39k/op)   &#xA;    2.769367662s(3k/op)  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;解密&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    33.0261118s(39k)  &#xA;    2.698096243)(3k)  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;2,des3:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;加密&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    98.480689665s(39k/op)  &#xA;    8.284633236s(3k/op)  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;解密&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    97.500104132s(39k/op)  &#xA;    7.824800258s(3k/op)  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;3,aes:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;加密&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    1.431315982s(16位密钥,39k/op)  &#xA;    1.655555551s(32位密钥,39k/op)  &#xA;    0.1835701936s(32位密钥,3k/op)  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;解密&lt;/strong&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    1.478518076s(16位密钥,39k/op)  &#xA;    1.699795055(32位密钥,39k/op)  &#xA;    0.187044405000s(32位密钥,3k/op)  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;二:加密前后数据长度对比&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;des,des3加密后的数据较加密前平均多4字节  &#xA;&#xA;aes加密后的数据较加密前平均多24字节&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;三:aes加密与自己简单的加密性能对比(195k/op)&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;aes加密: 6.688336596s  &#xA;&#xA;自己加密算法:2.032817821s&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;自己简单的加密算法，用于跟以上加密算法简单对比,纯属瞎写,哈哈😄:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;for i := 0; i &amp;lt; len(data); i++ {&#xA;    d := data[i]&#xA;    b := int(d) ^ i&#xA;    data[i] = byte(b)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;即每个字节异或重新赋值&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>centos6.5安装mongodb</title>
      <link>http://sample.com/mongodb/centos6.5%E5%AE%89%E8%A3%85mongodb/</link>
      <pubDate>2016-02-24 12:00:00 +0800</pubDate>
      <description>&lt;pre&gt;&lt;code&gt;wget https://fastdl.mongodb.org/linux/mongodb-linux-i686-2.6.7.tgz?_ga=1.68265944.858401362.1421216907  &#xA;&#xA;tar -zxvf mongodb-linux-i686-2.6.7.tgz&#xA;mkdir -p /data/db&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;mongod&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;错误及解决:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;/lib/ld-linux.so.2: bad ELF interpreter: 没有那个文件或目录&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;sudo yum install glibc.i686&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;&lt;code&gt;mongodb 安装错误error while loading shared libraries: libstdc++.so.6: cannot open shared object file&lt;/code&gt;&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;yum whatprovides libstdc++.so.6 &#xA;&#xA;yum install libstdc++-4.4.7-11.el6.i686&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>HBuilder调试APP</title>
      <link>http://sample.com/hbuilder/HBuilder%E8%B0%83%E8%AF%95APP/</link>
      <pubDate>2016-02-22 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;方法一&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;1,手机安装百度连接助手&#xA;2,电脑安装91手机助手&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;../01.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;方法二&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;1,安装海马玩模拟器(Droid4X)&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;../02.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;2,在Hbuilder--&amp;gt;运行菜单中&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;../03.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>git conflict</title>
      <link>http://sample.com/git/git-conflict/</link>
      <pubDate>2016-02-21 12:00:00 +0800</pubDate>
      <description>&lt;h3&gt;如果系统中有一些配置文件在服务器上做了配置修改,然后后续开发又新添加一些配置项的时候,&lt;/h3&gt;&#xA;&#xA;&lt;h4&gt;&lt;em&gt;在发布这个配置文件的时候,会发生代码冲突:&lt;/em&gt;&lt;/h4&gt;&#xA;&#xA;&lt;hr /&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;error: Your local changes to the following files would be overwritten by merge:&#xA;     protected/config/main.php&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;code&gt;Please, commit your changes or stash them before you can merge.&lt;/code&gt;&lt;/h2&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;希望保留生产服务器上所做的改动,仅仅并入新配置项&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;  git stash&#xA;  git pull&#xA;  git stash pop   &#xA;&#xA;  然后可以使用git diff -w +文件名 来确认代码自动合并的情况.&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&#xA;&lt;li&gt;&lt;p&gt;如果希望用代码库中的文件完全覆盖本地工作版本&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git reset --hard&#xA;git pull&#xA;其中git reset是针对版本,  &#xA;&#xA;如果想针对文件回退本地修改,使用&#xA;git checkout HEAD file/to/restore  &#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;</description>
    </item>
    <item>
      <title>centos7搭建git-server</title>
      <link>http://sample.com/git/centos7%E6%90%AD%E5%BB%BAgit-server/</link>
      <pubDate>2016-02-21 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;1、安装Git&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel perl-devel&#xA; yum install git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;接下来我们 创建一个git用户组和用户，用来运行git服务：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;groupadd git&#xA;adduser git -g git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;2、创建证书登录&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;收集所有需要登录的用户的公钥，公钥位于id_rsa.pub文件中，&lt;br /&gt;&#xA;把我们的公钥导入到/home/git/.ssh/authorized_keys文件里，一行一个。&lt;br /&gt;&#xA;如果没有该文件创建它:&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    $ cd /home/git/  &#xA;    $ mkdir .ssh  &#xA;    $ chmod 700 .ssh  &#xA;    $ touch .ssh/authorized_keys  &#xA;    $ chmod 600 .ssh/authorized_keys  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;3、初始化Git仓库&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;首先我们选定一个目录作为Git仓库，假定是/home/gitrepo/w3cschoolcc.git，&#xA;在/home/gitrepo目录下输入命令：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ cd /home&#xA;$ mkdir gitrepo&#xA;$ chown git:git gitrepo/&#xA;$ cd gitrepo&#xA;&#xA;$ git init --bare w3cschoolcc.git&#xA;Initialized empty Git repository in /home/gitrepo/w3cschoolcc.git/&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;以上命令Git创建一个空仓库，服务器上的Git仓库通常都以.git结尾。&lt;br /&gt;&#xA;然后，把仓库所属用户改为git：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ chown -R git:git w3cschoolcc.git&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;4、克隆仓库&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;$ git clone git@192.168.45.4:/home/gitrepo/w3cschoolcc.git  #可能需要输入git用户密码&#xA;也可以git clone root@192.168.45.4:/home/gitrepo/w3cschoolcc.git  #此时输入root密码&#xA;&#xA;Cloning into &#39;w3cschoolcc&#39;... warning: You appear to have cloned an empty repository. Checking connectivity... done.&#xA;192.168.45.4 为 Git 所在服务器 ip ，你需要将其修改为你自己的 Git 服务 ip。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h4&gt;这样我们的 Git 服务器安装就完成了，接下来我们可以禁用 git 用户通过shell登录，可以通过编辑/etc/passwd文件完成。找到类似下面的一行：&lt;/h4&gt;&#xA;&#xA;&lt;h2&gt;git:x:503:503::/home/git:/bin/bash&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;改为：&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;git:x:503:503::/home/git:/sbin/nologin&lt;/h2&gt;&#xA;</description>
    </item>
    <item>
      <title>docker gitlab</title>
      <link>http://sample.com/gitlab/docker-gitlab/</link>
      <pubDate>2016-02-18 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;相关参考资料:&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;&lt;a href=&#34;http://yangchangming.com/blog/show/47&#34;&gt;OS X 上安装GitLab全程指南&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&lt;h3&gt;&lt;a href=&#34;http://www.tuicool.com/articles/UrQJFz&#34;&gt;gitlab一键安装 笔记&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&lt;h3&gt;&lt;a href=&#34;https://github.com/sameersbn/docker-gitlab/blob/master/README.md#redis&#34;&gt;sameersbn/gitlab:8.4.4&lt;/a&gt;&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;docker run --name gitlab -d  -p 10080:80  --link gitlab-postgresql:postgresql --link gitlab-redis:redisio --volume /srv/docker/gitlab/gitlab:/home/git/data  sameersbn/gitlab:7.5.3&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;docker@boot2docker:~$&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;docker ps -a&#xA;&#xA;CONTAINER ID        IMAGE                            COMMAND                CREATED             STATUS              PORTS                                    NAMES&#xA;&#xA;2b61b7095091        sameersbn/gitlab:7.5.3           &amp;quot;/app/init app:start   7 seconds ago       Up 6 seconds        22/tcp, 443/tcp, 0.0.0.0:10080-&amp;gt;80/tcp   gitlab              &#xA;&#xA;0d3c6db7f97d        quay.io/sameersbn/redis:latest   &amp;quot;/sbin/entrypoint.sh   23 hours ago        Up 23 hours         6379/tcp                                 gitlab-redis        &#xA;&#xA;7171631f285d        sameersbn/postgresql:latest      &amp;quot;/sbin/entrypoint.sh   23 hours ago        Up 23 hours         5432/tcp                                 gitlab-postgresql  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;&amp;gt;git remote add origin &lt;a href=&#34;http://192.168.59.103:10080/root/demo.git&#34;&gt;http://192.168.59.103:10080/root/demo.git&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&lt;h2&gt;&amp;gt;使用局域网ip或localhost或127.0.0.1  加上10080端口访问  192.168.59.103:10080&lt;/h2&gt;&#xA;&#xA;&lt;ul&gt;&#xA;&lt;li&gt;&lt;p&gt;ip是boot2docker  start 得到的 ip&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;boot2docker  start&#xA;Waiting for VM and Docker daemon to start........o&#xA;Started.&#xA;Writing /Users/leonard/.boot2docker/certs/boot2docker-vm/ca.pem&#xA;Writing /Users/leonard/.boot2docker/certs/boot2docker-vm/cert.pem&#xA;Writing /Users/leonard/.boot2docker/certs/boot2docker-vm/key.pem&#xA;&#xA;To connect the Docker client to the Docker daemon, please set:&#xA;    export DOCKER_TLS_VERIFY=1&#xA;    export DOCKER_HOST=tcp://192.168.59.103:2376&#xA;    export DOCKER_CERT_PATH=/Users/leonard/.boot2docker/certs/boot2docker-vm&#xA;&lt;/code&gt;&lt;/pre&gt;&lt;/li&gt;&#xA;&lt;/ul&gt;&#xA;&#xA;&lt;p&gt;使用 boot2docker时，所有的 container都在boot2docker up命令启动的 Virtual Box VM里，&lt;br /&gt;&#xA;container使用的端口通过 docker -P或者 -p映射到了 VM里的 LinuxHost上，但是在 Mac OS X里是没有的。&lt;br /&gt;&#xA;从本机倒是可能用VM的ip访问到 container，从移动设备或其它机器上需要访问 container时，就需要在 Mac OS X上再做一次端口映射(portmapping)。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;有两个方法&lt;/strong&gt;，在&lt;strong&gt;&lt;a href=&#34;https://github.com/boot2docker/boot2docker/blob/master/doc/WORKAROUNDS.md&#34;&gt;https://github.com/boot2docker/boot2docker/blob/master/doc/WORKAROUNDS.md&lt;/a&gt;&lt;/strong&gt;里有介绍：&lt;/p&gt;&#xA;&#xA;&lt;p&gt;在 Mac OS X与 VM Linux之间临时建立 ssh tunnel&lt;br /&gt;&#xA;&lt;code&gt;boot2docker ssh -vnNTL 8000:localhost:10080&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;用 Virtual Box的 NAT端口映射能力建立永久性的映射&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;虚拟机已关闭时：&lt;code&gt;VBoxManage modifyvm &amp;quot;boot2docker-vm&amp;quot; --natpf1 &amp;quot;tcp-port8000,tcp,,8000,,10080&amp;quot;;&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;虚拟机在运行时：&lt;code&gt;VBoxManage controlvm &amp;quot;boot2docker-vm&amp;quot; natpf1 &amp;quot;tcp-port8000,tcp,,8000,,10080&amp;quot;&lt;/code&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>go get 报错</title>
      <link>http://sample.com/git/go-get-%E6%8A%A5%E9%94%99/</link>
      <pubDate>2016-02-18 12:00:00 +0800</pubDate>
      <description>&lt;pre&gt;&lt;code&gt;Cloning into &#39;E:\work\gopath\src\github.com\astaxie\beego&#39;...&#xA;fatal: unable to access &#39;https://github.com/astaxie/beego/&#39;: error setting certificate verify locations:&#xA;CAfile: E:/Software/git/Git/mingw64/ssl/certs/ca-bundle.crt&#xA;CApath: none&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;解决:&lt;/h1&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;git config --global http.sslVerify false//跳过ssl校验即可&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;</description>
    </item>
    <item>
      <title>git 创建分支并提交到远程</title>
      <link>http://sample.com/git/git-%E5%88%9B%E5%BB%BA%E5%88%86%E6%94%AF%E5%B9%B6%E6%8F%90%E4%BA%A4%E5%88%B0%E8%BF%9C%E7%A8%8B/</link>
      <pubDate>2016-02-18 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;1,从已有的分支创建新的分支(如从master分支),创建一个dev分支&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;git checkout -b dev&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;2,创建完可以查看一下,分支已经切换到dev&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git branch&#xA;&#xA;    * dev&#xA;&#xA;    master&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;3,提交该分支到远程仓库&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git push origin dev&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;4,测试从远程获取dev&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git pull origin dev&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;或者：&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;如果用命令行，运行 git fetch，可以将远程分支信息获取到本地,&lt;br /&gt;&#xA;再运行 &lt;strong&gt;git checkout -b local-branchname origin/remote_branchname&lt;/strong&gt;&lt;br /&gt;&#xA;就可以将远程分支映射到本地命名为local-branchname  的一分支&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;5,我觉得现在重要的就是设置git push,pull默认的提交获取分支,这样就很方便的使用git push 提交信息或git pull获取信息&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git branch --set-upstream-to=origin/dev&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;取消对master的跟踪&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git branch --unset-upstream master&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;6,现在随便修改一下工程文件的内容,然后&lt;em&gt;git commit ,git push&lt;/em&gt;,之后就可以直接提交到远程的dev分支中,而不会是master&lt;/h2&gt;&#xA;</description>
    </item>
    <item>
      <title>在github上同步一个分支(fork)</title>
      <link>http://sample.com/git/%E5%9C%A8github%E4%B8%8A%E5%90%8C%E6%AD%A5%E4%B8%80%E4%B8%AA%E5%88%86%E6%94%AF%28fork%29/</link>
      <pubDate>2016-02-18 12:00:00 +0800</pubDate>
      <description>&lt;h3&gt;在github上同步一个分支(fork)&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;在同步之前，需要创建一个远程点指向上游仓库(repo).如果你已经派生了一个原始仓库，可以按照如下方法做。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    $ git remote -v  &#xA;    # List the current remotes （列出当前远程仓库）  &#xA;    # origin  https://github.com/user/repo.git (fetch)  &#xA;    # origin  https://github.com/user/repo.git (push)  &#xA;    $ git remote add upstream https://github.com/otheruser/repo.git  &#xA;    # Set a new remote (设置一个新的远程仓库)  &#xA;    $ git remote -v  &#xA;    # Verify new remote (验证新的原唱仓库)  &#xA;    # origin    https://github.com/user/repo.git (fetch)  &#xA;    # origin    https://github.com/user/repo.git (push)  &#xA;    # upstream  https://github.com/otheruser/repo.git (fetch)  &#xA;    # upstream  https://github.com/otheruser/repo.git (push)  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;同步&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;同步上游仓库到你的仓库需要执行&lt;strong&gt;两步&lt;/strong&gt;：首先你需要从远程拉去，之后你需要合并你希望的分支到你的本地副本分支。&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;拉取&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;从远程仓库拉取将取回其分支以及各自的提交。它们将存储在你本地仓库的指定分之下。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    $ git fetch upstream&#xA;    # Grab the upstream remote&#39;s branches&#xA;    # remote: Counting objects: 75, done.&#xA;    # remote: Compressing objects: 100% (53/53), done.&#xA;    # remote: Total 62 (delta 27), reused 44 (delta 9)&#xA;    # Unpacking objects: 100% (62/62), done.&#xA;    # From https://github.com/otheruser/repo&#xA;    #  * [new branch]      master     -&amp;gt; upstream/master&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;现在我们把上游master保存到了本地仓库，upstream/master&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    $ git branch -va&#xA;    # List all local and remote-tracking branches&#xA;    # * master                  a422352 My local commit&#xA;    #   remotes/origin/HEAD     -&amp;gt; origin/master&#xA;    #   remotes/origin/master   a422352 My local commit&#xA;    #   remotes/upstream/master 5fdff0f Some upstream commit&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;合并&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;现在我们已经拉取了上游仓库，我们将要合并其变更到我们的本地分支。这将使该分支与上游同步，而不会失去我们的本地更改。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    $ git checkout master&#xA;    # Check out our local master branch&#xA;    # Switched to branch &#39;master&#39;&#xA;&#xA;    $ git merge upstream/master&#xA;    # Merge upstream&#39;s master into our own&#xA;    # Updating a422352..5fdff0f&#xA;    # Fast-forward&#xA;    #  README                    |    9 -------&#xA;    #  README.md                 |    7 ++++++&#xA;    #  2 files changed, 7 insertions(+), 9 deletions(-)&#xA;    #  delete mode 100644 README&#xA;    #  create mode 100644 README.md&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;如果您的本地分支没有任何独特的提交，Git会改为执行“fast-forward”。&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;    $ git merge upstream/master&#xA;    # Updating 34e91da..16c56ad&#xA;    # Fast-forward&#xA;    #  README.md                 |    5 +++--&#xA;    #  1 file changed, 3 insertions(+), 2 deletions(-)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;最后将本地变更推送到远程服务器即可。&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;https://help.github.com/articles/syncing-a-fork&#34;&gt;参考资料&lt;/a&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>centos7安装gitlab</title>
      <link>http://sample.com/centos/centos7%E5%AE%89%E8%A3%85gitlab/</link>
      <pubDate>2016-02-18 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;a href=&#34;http://my.oschina.net/u/1169607/blog/345833&#34;&gt;参考&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;gitlab-ctl reconfigure 报错解决方法&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;遇见的问题及解决:&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;[root@websvr01 ~]# sudo gitlab-ctl reconfigure&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;Starting Chef Client, version 11.12.2&#xA;Compiling Cookbooks...&#xA;Recipe: gitlab::default&#xA;  directory[/etc/gitlab] action create (up to date)&#xA;================================================================================&#xA;Recipe Compile Error in /opt/gitlab/embedded/cookbooks/gitlab/recipes/default.rb&#xA;================================================================================&#xA;RuntimeError&#xA;------------&#xA;External URL must include a FQDN&#xA;Cookbook Trace:&#xA;---------------&#xA;  /opt/gitlab/embedded/cookbooks/gitlab/libraries/gitlab.rb:109:in `parse_external_url&#39;&#xA;  /opt/gitlab/embedded/cookbooks/gitlab/libraries/gitlab.rb:260:in `generate_config&#39;&#xA;  /opt/gitlab/embedded/cookbooks/gitlab/recipes/default.rb:34:in `from_file&#39;&#xA;Relevant File Content:&#xA;----------------------&#xA;/opt/gitlab/embedded/cookbooks/gitlab/libraries/gitlab.rb:&#xA;102:  &#xA;103:      def parse_external_url&#xA;104:        return unless external_url&#xA;105:  &#xA;106:        uri = URI(external_url.to_s)&#xA;107:  &#xA;108:        unless uri.host&#xA;109&amp;gt;&amp;gt;         raise &amp;quot;External URL must include a FQDN&amp;quot;&#xA;110:        end&#xA;111:        Gitlab[&#39;user&#39;][&#39;git_user_email&#39;] ||= &amp;quot;gitlab@#{uri.host}&amp;quot;&#xA;112:        Gitlab[&#39;gitlab_rails&#39;][&#39;gitlab_host&#39;] = uri.host&#xA;113:        Gitlab[&#39;gitlab_rails&#39;][&#39;gitlab_email_from&#39;] ||= &amp;quot;gitlab@#{uri.host}&amp;quot;&#xA;114:  &#xA;115:        case uri.scheme&#xA;116:        when &amp;quot;http&amp;quot;&#xA;117:          Gitlab[&#39;gitlab_rails&#39;][&#39;gitlab_https&#39;] = false&#xA;118:        when &amp;quot;https&amp;quot;&#xA;Running handlers:&#xA;[2014-11-25T11:10:44+08:00] ERROR: Running exception handlers&#xA;Running handlers complete&#xA;[2014-11-25T11:10:44+08:00] ERROR: Exception handlers complete&#xA;[2014-11-25T11:10:44+08:00] FATAL: Stacktrace dumped to /opt/gitlab/embedded/cookbooks/cache/chef-stacktrace.out&#xA;Chef Client failed. 0 resources updated in 7.716937465 seconds&#xA;[2014-11-25T11:10:44+08:00] ERROR: External URL must include a FQDN&#xA;[2014-11-25T11:10:45+08:00] FATAL: Chef::Exceptions::ChildConvergeError: Chef run process exited unsuccessfully (exit code 1)&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;解决方法：&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;是因为/etc/gitlab/gitlab.rb文件中的内容是：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;external_url &#39;hostname&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;将其修改为：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;external_url=&#39;hostname&#39;&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;即可，只需要在原来的配置项中添加个 ‘=’ 即可，为了避免域名引起的问题，也可以直接配置ip，如下所示：&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;external_url=&#39;192.168.1.49&#39;。&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>centos6.5 gitlab</title>
      <link>http://sample.com/gitlab/centos6.5-gitlab/</link>
      <pubDate>2016-02-18 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;a href=&#34;https://about.gitlab.com/downloads/&#34;&gt;参考&lt;/a&gt;&lt;br /&gt;&#xA;&lt;a href=&#34;http://www.01happy.com/centos-6-5-install-gitlab/&#34;&gt;教程&lt;/a&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;&lt;code&gt;错误:&lt;/code&gt;&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; Invalid GPG Key from file:///etc/pki/rpm-gpg/RPM-GPG-KEY-puias: No key found in given key data&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;解决:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt; rpm --import http://puias.princeton.edu/data/puias/6/x86_64/os/RPM-GPG-KEY-puias&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;&lt;code&gt;错误:&lt;/code&gt;&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;../A24DFE8B-19CB-4284-B4B5-153C4BFADDE7.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;解决:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;yum install libxml2-devel libxslt libxslt-devel&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;gitlab安装成功!&lt;/h1&gt;&#xA;&#xA;&lt;p&gt;&lt;img src=&#34;../success.png&#34; alt=&#34;&#34; /&gt;&lt;br /&gt;&#xA;  &lt;img src=&#34;../4AD4BE76-6A77-4807-89C9-F97836F71391.png&#34; alt=&#34;&#34; /&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>systemctl</title>
      <link>http://sample.com/centos/systemctl/</link>
      <pubDate>2016-02-17 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;strong&gt;systemctl&lt;/strong&gt; 是管制服务的主要工具，&lt;br /&gt;&#xA;它整合了&lt;em&gt;chkconfig&lt;/em&gt; 与 *service*功能于一体。&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;systemctl is-enabled iptables.service&lt;/p&gt;&#xA;&#xA;&lt;p&gt;systemctl is-enabled servicename.service #查询服务是否开机启动&lt;br /&gt;&#xA;systemctl enable *.service #开机运行服务&lt;br /&gt;&#xA;systemctl disable *.service #取消开机运行&lt;br /&gt;&#xA;systemctl start *.service #启动服务&lt;br /&gt;&#xA;systemctl stop *.service #停止服务&lt;br /&gt;&#xA;systemctl restart *.service #重启服务&lt;br /&gt;&#xA;systemctl reload *.service #重新加载服务配置文件&lt;br /&gt;&#xA;systemctl status *.service #查询服务运行状态&lt;br /&gt;&#xA;systemctl --failed #显示启动失败的服务&lt;br /&gt;&#xA;注：*代表某个服务的名字，如http的服务名为httpd&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;例如在CentOS 7 上安装http&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;[root@CentOS7 ~]#&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;yum -y install httpd&lt;/code&gt;&#xA;启动服务（等同于service httpd start）&lt;br /&gt;&#xA;&lt;code&gt;systemctl start httpd.service&lt;/code&gt;&#xA;停止服务（等同于service httpd stop）&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;systemctl stop httpd.service&lt;/code&gt;&#xA;重启服务（等同于service httpd restart）&lt;br /&gt;&#xA;&lt;code&gt;systemctl restart httpd.service&lt;/code&gt;&#xA;查看服务是否运行（等同于service httpd status）&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;systemctl status httpd.service&lt;/code&gt;&#xA;开机自启动服务（等同于chkconfig httpd on）&lt;br /&gt;&#xA;&lt;code&gt;systemctl enable httpd.service&lt;/code&gt;&#xA;开机时禁用服务（等同于chkconfig httpd on）&#xA;&lt;code&gt;systemctl disable httpd.service&lt;/code&gt;&#xA;查看服务是否开机启动 （等同于chkconfig --list）&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>iptables</title>
      <link>http://sample.com/linux/iptables/</link>
      <pubDate>2016-02-17 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;1,&lt;strong&gt;检测iptables&lt;/strong&gt;:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;`rpm -qa iptables`  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;result:&lt;/strong&gt; &lt;code&gt;iptables-1.4.21-13.el7.x86_64&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;2,&lt;strong&gt;怎样检测并且确保iptables服务正在运行？&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;service status iptables           [On CentOS 6/5]&#xA;systemctl status iptables         [On CentOS 7]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;如果iptables没有在运行，可以使用下面的语句&lt;/p&gt;&#xA;&#xA;&lt;p&gt;---------------- &lt;strong&gt;在CentOS 6/5下&lt;/strong&gt; ----------------&lt;br /&gt;&#xA;&lt;code&gt;chkconfig --level 35 iptables on&lt;/code&gt;&lt;br /&gt;&#xA;&lt;code&gt;service iptables start&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;---------------- &lt;strong&gt;在CentOS 7下&lt;/strong&gt; ----------------&lt;br /&gt;&#xA;&lt;code&gt;systemctl enable iptables&lt;/code&gt;&lt;br /&gt;&#xA;&lt;code&gt;systemctl start iptables&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;检查iptables中当前定义的规则&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;iptables -L&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;刷新所有的iptables规则或者特定的链, 使用下面的命令来刷新一个特定的链。&lt;/h3&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;iptables --flush OUTPUT&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;要刷新所有的规则，可以用：&lt;/h3&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;iptables --flush&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;在iptables中添加一条规则，接受所有从一个信任的IP地址（例如，192.168.0.7）过来的包。&lt;/h3&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;iptables -A INPUT -s 192.168.0.7 -j ACCEPT&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;还可以在源IP中使用标准的斜线和子网掩码：&lt;/h3&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;iptables -A INPUT -s 192.168.0.&lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;24&lt;/sub&gt; -j ACCEPT&#xA;iptables -A INPUT -s 192.168.0.&lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;255&lt;/sub&gt;.255.255.0 -j ACCEPT&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;假如有一台电脑的本地IP地址是192.168.0.6。你需要封锁在21、22、23和80号端口上的连接，你会怎么做？&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;答案&lt;/strong&gt;  : 这时，我所需要的就是在iptables中使用‘multiport‘选项，并将要封锁的端口号跟在它后面。&lt;br /&gt;&#xA;&lt;code&gt;iptables -A INPUT -s 192.168.0.6 -p tcp -m multiport --dport 22,23,80,8080 -j DROP&lt;/code&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>centos挂载ntfs</title>
      <link>http://sample.com/centos/centos%E6%8C%82%E8%BD%BDntfs/</link>
      <pubDate>2016-02-16 12:00:00 +0800</pubDate>
      <description>&lt;pre&gt;&lt;code&gt;sudo mount -t ntfs-3g  /dev/sdb1 /pic/&#xA;&#xA;sudo umount /pic/  强制卸载&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>说明</title>
      <link>http://sample.com/README/%E8%AF%B4%E6%98%8E/</link>
      <pubDate>2016-02-16 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;em&gt;本博客初次使用&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;本人相关博客近期会陆续迁移到此处,欢迎批评指点!&lt;/h1&gt;&#xA;</description>
    </item>
    <item>
      <title>Leonard的第一篇博客</title>
      <link>http://sample.com/2016/new-born.html</link>
      <pubDate>2016-02-15 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;感谢你使用Gor编写博客&lt;/h1&gt;&#xA;&#xA;&lt;h2&gt;本文位于 posts/first-blog.md , 你可以任意删掉,修改这个文件&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;文件开头是当前文章的元数据&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;date为自动生成, 当然,你可以修改,这是你的自由&lt;/li&gt;&#xA;&lt;li&gt;permalink 可以是固定地址,也可以由gor为你自动生成&lt;/li&gt;&#xA;&lt;li&gt;categories 就是分类, 可以多个&lt;/li&gt;&#xA;&lt;li&gt;tags 同理,多个标签也是很常见的&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;请确保文件使用UTF8 without BOM编码&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;你可以通过执行下面的语句来新建一篇博客:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;gor post 文章标题&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;编译你的博客,并预览之&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;gor compile #编译&#xA;gor http&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;然后打开你的浏览器,访问 &lt;a href=&#34;http://127.0.0.1:8080&#34;&gt;http://127.0.0.1:8080&lt;/a&gt; 来预览&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;你将使用Markdown来编写博客&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://wowubuntu.com/markdown/&#34;&gt;Markdown 语法中文版&lt;/a&gt; 能让你快速入门其语法&lt;/p&gt;&#xA;&#xA;&lt;p&gt;相信&lt;a href=&#34;http://markdownpad.com&#34;&gt;MarkdownPad&lt;/a&gt;或&lt;a href=&#34;http://code.google.com/p/liteide/&#34;&gt;liteide&lt;/a&gt;会是你的编写博客的好帮手&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;如果你打算部署到github的pages上&lt;/h2&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;申请github帐户&lt;/li&gt;&#xA;&lt;li&gt;新建一个库 username.github.com 即你的用户名命名的地址&lt;/li&gt;&#xA;&lt;li&gt;将compiled目录,作为根路径,提交上去github.com上&lt;/li&gt;&#xA;&lt;li&gt;稍等几分钟, 你即可通过 &lt;a href=&#34;http://username.github.com&#34;&gt;http://username.github.com&lt;/a&gt; 访问到&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h2&gt;附上git教程 &lt;a href=&#34;http://gitbook.liuhui998.com/&#34;&gt;GitBook中文版&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;一般来说,你只需要几个简单的git命令就足以应付大部分需求(仅示例)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git clone git://github.com/wendal/wendal.net.git&#xA;git add -A&#xA;git commit -m &amp;quot;...&amp;quot;&#xA;git pull&#xA;git push&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;用gor编写博客将会是一件很开心的事,如果有任何意见或建议,欢迎到 &lt;a href=&#34;http://github.com/wendal/gor&#34;&gt;gor的官网&lt;/a&gt; 提交issue&lt;/h2&gt;&#xA;&#xA;&lt;h1&gt;祝你使用愉快&lt;/h1&gt;&#xA;</description>
    </item>
  </channel>
</rss>