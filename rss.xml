<?xml version="1.0"  encoding="UTF-8"?>
<rss version="2.0">  <channel>
    <title>Blog Title</title>
    <link>http://sample.com</link>
    <pubDate>17 Feb 16 23:31 CST</pubDate>
    <item>
      <title>systemctl</title>
      <link>http://sample.com/centos/systemctl/</link>
      <pubDate>2016-02-17 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;strong&gt;systemctl&lt;/strong&gt; 是管制服务的主要工具，&lt;br /&gt;&#xA;它整合了&lt;em&gt;chkconfig&lt;/em&gt; 与 *service*功能于一体。&lt;/p&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;systemctl is-enabled iptables.service&lt;/p&gt;&#xA;&#xA;&lt;p&gt;systemctl is-enabled servicename.service #查询服务是否开机启动&lt;br /&gt;&#xA;systemctl enable *.service #开机运行服务&lt;br /&gt;&#xA;systemctl disable *.service #取消开机运行&lt;br /&gt;&#xA;systemctl start *.service #启动服务&lt;br /&gt;&#xA;systemctl stop *.service #停止服务&lt;br /&gt;&#xA;systemctl restart *.service #重启服务&lt;br /&gt;&#xA;systemctl reload *.service #重新加载服务配置文件&lt;br /&gt;&#xA;systemctl status *.service #查询服务运行状态&lt;br /&gt;&#xA;systemctl --failed #显示启动失败的服务&lt;br /&gt;&#xA;注：*代表某个服务的名字，如http的服务名为httpd&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;例如在CentOS 7 上安装http&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;[root@CentOS7 ~]#&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;yum -y install httpd&lt;/code&gt;&#xA;启动服务（等同于service httpd start）&lt;br /&gt;&#xA;&lt;code&gt;systemctl start httpd.service&lt;/code&gt;&#xA;停止服务（等同于service httpd stop）&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;systemctl stop httpd.service&lt;/code&gt;&#xA;重启服务（等同于service httpd restart）&lt;br /&gt;&#xA;&lt;code&gt;systemctl restart httpd.service&lt;/code&gt;&#xA;查看服务是否运行（等同于service httpd status）&lt;/p&gt;&#xA;&#xA;&lt;p&gt;&lt;code&gt;systemctl status httpd.service&lt;/code&gt;&#xA;开机自启动服务（等同于chkconfig httpd on）&lt;br /&gt;&#xA;&lt;code&gt;systemctl enable httpd.service&lt;/code&gt;&#xA;开机时禁用服务（等同于chkconfig httpd on）&#xA;&lt;code&gt;systemctl disable httpd.service&lt;/code&gt;&#xA;查看服务是否开机启动 （等同于chkconfig --list）&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>iptables</title>
      <link>http://sample.com/linux/iptables/</link>
      <pubDate>2016-02-17 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;1,&lt;strong&gt;检测iptables&lt;/strong&gt;:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;`rpm -qa iptables`  &#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;result:&lt;/strong&gt; &lt;code&gt;iptables-1.4.21-13.el7.x86_64&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;2,&lt;strong&gt;怎样检测并且确保iptables服务正在运行？&lt;/strong&gt;&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;service status iptables           [On CentOS 6/5]&#xA;systemctl status iptables         [On CentOS 7]&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;如果iptables没有在运行，可以使用下面的语句&lt;/p&gt;&#xA;&#xA;&lt;p&gt;---------------- &lt;strong&gt;在CentOS 6/5下&lt;/strong&gt; ----------------&lt;br /&gt;&#xA;&lt;code&gt;chkconfig --level 35 iptables on&lt;/code&gt;&lt;br /&gt;&#xA;&lt;code&gt;service iptables start&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;p&gt;---------------- &lt;strong&gt;在CentOS 7下&lt;/strong&gt; ----------------&lt;br /&gt;&#xA;&lt;code&gt;systemctl enable iptables&lt;/code&gt;&lt;br /&gt;&#xA;&lt;code&gt;systemctl start iptables&lt;/code&gt;&lt;/p&gt;&#xA;&#xA;&lt;h3&gt;检查iptables中当前定义的规则&lt;/h3&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;iptables -L&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h3&gt;刷新所有的iptables规则或者特定的链, 使用下面的命令来刷新一个特定的链。&lt;/h3&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;iptables --flush OUTPUT&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;要刷新所有的规则，可以用：&lt;/h3&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;iptables --flush&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;在iptables中添加一条规则，接受所有从一个信任的IP地址（例如，192.168.0.7）过来的包。&lt;/h3&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;iptables -A INPUT -s 192.168.0.7 -j ACCEPT&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;还可以在源IP中使用标准的斜线和子网掩码：&lt;/h3&gt;&#xA;&#xA;&lt;blockquote&gt;&#xA;&lt;p&gt;iptables -A INPUT -s 192.168.0.&lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;24&lt;/sub&gt; -j ACCEPT&#xA;iptables -A INPUT -s 192.168.0.&lt;sup&gt;7&lt;/sup&gt;&amp;frasl;&lt;sub&gt;255&lt;/sub&gt;.255.255.0 -j ACCEPT&lt;/p&gt;&#xA;&lt;/blockquote&gt;&#xA;&#xA;&lt;h3&gt;假如有一台电脑的本地IP地址是192.168.0.6。你需要封锁在21、22、23和80号端口上的连接，你会怎么做？&lt;/h3&gt;&#xA;&#xA;&lt;p&gt;&lt;strong&gt;答案&lt;/strong&gt;  : 这时，我所需要的就是在iptables中使用‘multiport‘选项，并将要封锁的端口号跟在它后面。&lt;br /&gt;&#xA;&lt;code&gt;iptables -A INPUT -s 192.168.0.6 -p tcp -m multiport --dport 22,23,80,8080 -j DROP&lt;/code&gt;&lt;/p&gt;&#xA;</description>
    </item>
    <item>
      <title>mount</title>
      <link>http://sample.com/centos/mount/</link>
      <pubDate>2016-02-16 12:00:00 +0800</pubDate>
      <description>&lt;pre&gt;&lt;code&gt;sudo mount -t ntfs-3g  /dev/sdb1 /pic/&#xA;&#xA;sudo umount /pic/  强制卸载&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;</description>
    </item>
    <item>
      <title>说明</title>
      <link>http://sample.com/README/%E8%AF%B4%E6%98%8E/</link>
      <pubDate>2016-02-16 12:00:00 +0800</pubDate>
      <description>&lt;p&gt;&lt;em&gt;本博客初次使用&lt;/em&gt;&lt;/p&gt;&#xA;&#xA;&lt;h1&gt;本人相关博客近期会陆续迁移到此处,欢迎批评指点!&lt;/h1&gt;&#xA;</description>
    </item>
    <item>
      <title>Leonard的第一篇博客</title>
      <link>http://sample.com/2016/new-born.html</link>
      <pubDate>2016-02-15 12:00:00 +0800</pubDate>
      <description>&lt;h1&gt;感谢你使用Gor编写博客&lt;/h1&gt;&#xA;&#xA;&lt;h2&gt;本文位于 posts/first-blog.md , 你可以任意删掉,修改这个文件&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;文件开头是当前文章的元数据&lt;/p&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;date为自动生成, 当然,你可以修改,这是你的自由&lt;/li&gt;&#xA;&lt;li&gt;permalink 可以是固定地址,也可以由gor为你自动生成&lt;/li&gt;&#xA;&lt;li&gt;categories 就是分类, 可以多个&lt;/li&gt;&#xA;&lt;li&gt;tags 同理,多个标签也是很常见的&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;p&gt;请确保文件使用UTF8 without BOM编码&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;你可以通过执行下面的语句来新建一篇博客:&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;gor post 文章标题&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;编译你的博客,并预览之&lt;/h2&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;gor compile #编译&#xA;gor http&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;p&gt;然后打开你的浏览器,访问 &lt;a href=&#34;http://127.0.0.1:8080&#34;&gt;http://127.0.0.1:8080&lt;/a&gt; 来预览&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;你将使用Markdown来编写博客&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;&lt;a href=&#34;http://wowubuntu.com/markdown/&#34;&gt;Markdown 语法中文版&lt;/a&gt; 能让你快速入门其语法&lt;/p&gt;&#xA;&#xA;&lt;p&gt;相信&lt;a href=&#34;http://markdownpad.com&#34;&gt;MarkdownPad&lt;/a&gt;或&lt;a href=&#34;http://code.google.com/p/liteide/&#34;&gt;liteide&lt;/a&gt;会是你的编写博客的好帮手&lt;/p&gt;&#xA;&#xA;&lt;h2&gt;如果你打算部署到github的pages上&lt;/h2&gt;&#xA;&#xA;&lt;ol&gt;&#xA;&lt;li&gt;申请github帐户&lt;/li&gt;&#xA;&lt;li&gt;新建一个库 username.github.com 即你的用户名命名的地址&lt;/li&gt;&#xA;&lt;li&gt;将compiled目录,作为根路径,提交上去github.com上&lt;/li&gt;&#xA;&lt;li&gt;稍等几分钟, 你即可通过 &lt;a href=&#34;http://username.github.com&#34;&gt;http://username.github.com&lt;/a&gt; 访问到&lt;/li&gt;&#xA;&lt;/ol&gt;&#xA;&#xA;&lt;h2&gt;附上git教程 &lt;a href=&#34;http://gitbook.liuhui998.com/&#34;&gt;GitBook中文版&lt;/a&gt;&lt;/h2&gt;&#xA;&#xA;&lt;p&gt;一般来说,你只需要几个简单的git命令就足以应付大部分需求(仅示例)&lt;/p&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;git clone git://github.com/wendal/wendal.net.git&#xA;git add -A&#xA;git commit -m &amp;quot;...&amp;quot;&#xA;git pull&#xA;git push&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h2&gt;用gor编写博客将会是一件很开心的事,如果有任何意见或建议,欢迎到 &lt;a href=&#34;http://github.com/wendal/gor&#34;&gt;gor的官网&lt;/a&gt; 提交issue&lt;/h2&gt;&#xA;&#xA;&lt;h1&gt;祝你使用愉快&lt;/h1&gt;&#xA;</description>
    </item>
    <item>
      <title>Go外部包操作非导出字段</title>
      <link>http://sample.com/default/Go%E5%A4%96%E9%83%A8%E5%8C%85%E6%93%8D%E4%BD%9C%E9%9D%9E%E5%AF%BC%E5%87%BA%E5%AD%97%E6%AE%B5/</link>
      <pubDate>2016-02-15 12:00:00 +0800</pubDate>
      <description>&lt;h2&gt;Go外部包操作非导出字段&lt;/h2&gt;&#xA;&#xA;&lt;h5&gt;ps:发现一种用法，看代码&lt;/h5&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type Template struct {&#xA;    name string&#xA;    *parse.Tree&#xA;    *common&#xA;    leftDelim  string&#xA;    rightDelim string&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;type common struct {&#xA;   &#x9;tmpl  map[string]*Template&#xA;   &#x9;parseFuncs template.FuncMap&#xA;   &#x9;execFuncs  map[string]reflect.Value&#xA;}&#xA;&#xA;func TestDemo(t *testing.T) {&#xA;   tpl := template.New(&amp;quot;Foo&amp;quot;)&#xA;   p := (*Template)(unsafe.Pointer(tpl))&#xA;   p.name = &amp;quot;Bar&amp;quot; // 关键在这里，突破私有成员&#xA;   logger.Debug(&amp;quot;%v:%v&amp;quot;, p, tpl)&#xA;}&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;输出结果&lt;/h1&gt;&#xA;&#xA;&lt;pre&gt;&lt;code&gt;&amp;amp;{Bar &amp;lt;nil&amp;gt; &amp;lt;nil&amp;gt;  } &amp;amp;{Bar &amp;lt;nil&amp;gt; &amp;lt;nil&amp;gt;  }&#xA;&lt;/code&gt;&lt;/pre&gt;&#xA;&#xA;&lt;h1&gt;t.name 也变成 Bar了, 成功突破template.Template私有字段 name&lt;/h1&gt;&#xA;</description>
    </item>
  </channel>
</rss>